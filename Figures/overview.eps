%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: overview-eve3.pdf
%%Creator: (Adobe Acrobat 22.3.0)
%%For: ebulut
%%CreationDate: 2/28/23, 10:11 AM
%%BoundingBox: 0 0 366 214
%%HiResBoundingBox: 0 0 365.1218 213.4215
%%CropBox: 0 0 365.1218 213.4215
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1070 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.0-c000 79.cca54b0, 2022/11/26-09:29:55        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2023-02-28T15:11:13Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2023-02-28T10:11:39-05:00"
   xmp:MetadataDate="2023-02-28T10:11:39-05:00"
   pdf:Producer="macOS Version 13.2.1 (Build 22D68) Quartz PDFContext"
   xmpMM:DocumentID="uuid:53d2032e-4930-bc4c-865d-c46f20c32232"
   xmpMM:InstanceID="uuid:8b4ef516-b3c7-6a4e-8500-1840e573d88d">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>ebulut</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">iot-uav</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -213.421 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-05 0 mo
1.52588e-05 213.421 li
365.122 213.421 li
365.122 0 li
cp
clp
-140.444 -49.0585 mo
627.556 -49.0585 li
627.556 382.941 li
-140.444 382.941 li
-140.444 -49.0585 li
false sop
0 0 0 0 cmyk
f
-140.444 -49.0585 mo
627.556 -49.0585 li
627.556 382.941 li
-140.444 382.941 li
-140.444 -49.0585 li
f
22.075 181.273 mo
76.4667 181.273 li
76.4667 155.105 li
22.075 155.105 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 152.444 213.421 ]ct
[54.3916 0 0 26.1678 -130.369 32.1487 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 291 
/H 140 
/M[291 0 0 -140 0 140 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 291 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 291 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 291 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 291 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
pAfdFJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcPNFJcLB&JcLB&JcLB&JcLB&JcN%U!s/H&!S.8#!!!&+!!33%!!*'#bl@_F_Z0Z;p],mGhZ*WWaT);A
h>l[<!!/Yk\c;^2aoDGB!JCH)!7UuK!mCWE#lXf(!pTdU!;urq!!!&8!!30'!T=%M!!33%!Vucr!T!eV
!rDrt!r2fr!rN#u!S%2F!!!3%!!!%]!<)ru!n%&K!Rq)L!W)is!Vl]q!W2ot!VufF!!!3%!!!&-!8.>P
!n%&K!S[VN!!!&s!!!&q!!!%g!.k3f!!!,q!!*-(e,TIMr;Zg$!!8Dc!!2QhhuE`Zqu?]tq>^Ktqu?]t
iW&rZo)JalpAb3p!qQEO!!!&u!!*3'VuXF0!!;cm!!:aPpAb0ppAb3p!n72M!W<!!"9HC?TE"rnoDejm
nc47AJcN1Y!!2Bc!s&K-"o\]-"U52/#6b;:#RC_BrW`N/!<<,t!!EI%MN'=d!!NB)!!*-(r<36(!sJT,
!X&W,rW3'#li7"drVup!_uT?.%KQV5"9el2#7(P=#7(VBrX'&?#R:S<"9f#7!WW3$r;Zp'"pth<!!!)s
!!E<*!<NB&"9\f/"9\i+!WW8p!!!&j!!!)j!;?Ho!X&9%qum''rWN9+r<30(q#CO"5]h5sq#CNu!!!$$
r<!*%!Wr?'!WiE'rW1:EbQ%eI!WiH*"TAQ-"9er5#6"i-#6"c0!s/Q."9J?!!s8Z2$2ji(!Vl]s!WW8r
!r`5r!:9ad!TsF`!X&9%qum''rWN9+r<30(q#CO"6$.8sq#CNu!!!$$r<!*%!Wr?'!WiE'rW2TjVZ6l$
!WiH*"TAQ-"9er5#6"i-#6"c0!s/Q."9J?!!WrQ1!"&T(!!2lq!Wi?&p]CEqjT#8]`;foX*r5kg!1s62
"UtqR*?6(@,:Y5r1G_!R6V1'Q=D;VoI>*WAOrB[TS"61FU8+HVTqJ!IR[K.dDc]:^,8^XcC];(+\gd[`
'-Jb^6VV31FaSamJq8Z1KS"`%H$FIQDJ!0Q9LqW?4utMR.OZJ])]08&&./dL!s@*SnGj^=$l0`u*?ldU
-nR,04$Gnt8PWAsD0C>YNKBBlR[p(DU]%"fUE6/&SstjnC/mV]-QNL&I'L&Q3<00g'.kn$9jM@LGQ)q6
I!pHlI=-9_EG]>t?!:#t84,R%2)?d5-m9TJ'bUoa%LE4<!WW3'quAYX#mq+W'c%Q(+<_pW-n?r.4$Q)%
<EW[BDg-PWJqJf7N/is\O,f6ZMMHn<G\^MP2(0CW"TVX'XYm.%!!<]J+=]63<*<UACMdm'E,TW1C1h'e
?s[#890td&3&NBA.4$)X)AX##%h9!Q#Qt21qZ+h?+U/5b',)-")]KhB,q1H#1,_3X7Sm5rBPVj=ItEB1
MiEhsOoCFbO,]$OHtubO2(Ta`"pnq9UlR&,!X9,Y,qhDS;d3^CAg:o#BPD-nB4G@U=]A3j8O#@!2)$U3
-m9]S(`!br%LEFK"p4c(!!<&u2Zj?n%2KZo(E=SB,:Frk0fD-[77^H_?taJ$H@:?rKSG>ANK&mUMi*:D
K7\8^>XgV"*"rJU=T5?:V]c$B%N-E>2Et2F@:s@mChn!.DJX&/B4PL\?X$K'6p<[m2DQm6,p=?L().Dm
%L`RJ"9JYE!$DIP&JGfn)]Th>,:4im1,CjO5Y+aU@;'G"H%(<sL5:ceNW>+aNfK*YN/NIEHYZ\P2D#sc
"pnq6To:Q'!X9,Z-8@_Y<*Wo3Ag1l$BkV0m@prYH<DcF^5s@@g1+k%)+sA$H()%5h#mgqC!r`0"!p9P"
!WrT7'HJJK0f1jR77pBR:/"8M69@+_!ZhmTq>^X"k2b[Pp](s.!sT,D&ePZi'GD&h$OI(C"Tne.!:9b*
!<WN7%iurG1H.Ha8Q/Vh=&i0r;,0\L3$o.;q>^U*OJkqK!!30'#Q5#;$k3UR$O?q>!s&G_!!r],$WE7b
VlHi#$EgY>ZF.0P]">Yij1bf3\$;p%J[PHk#Fp=*TrkZ2^$*3H]tCqe[^<?GYcOk(UnXNRR[BM+CaT>Q
!;c`r!TX4m";>F1VlQl#Yd(L?['dBS]>!7=#/%FMW0j0frkA`?ItsYrYdV-Wlb>'d]tCqe\$iZLYH=k'
USFNRR$!PsN-6KK!!!$"#XX!&PaIr1StMdPV5^JqX/t<_#-=esQ\K:RrN-<[C3ko1UT(?YXTY`,X/`*1
V5'cXR[BG(O,]$NJqSST*<O@`&HWGAI$L+fS=cLLUnjleWiN5[XTPZ(Tp>b3MQ?`Y#b#IIMjU-8X/tTg
/Zc%SWi;qmTq7dBP`UueM1U/)JTkNA!<<*#!!ku@NffToR@9\<TVA9[Vl6WTWs5T#SWneCU]%4nKa)::
Mj^98Wp$K!Wi;nnUnXNSSX>\,O,T!PK7SW&=WRXe!"]2A<I9prQ^OA8T:qsQV5C0kWo9u_WMQ2NJVU0&
WsG),EJTpNUo16XWu%e8Vl$;dTq7^@QB@2fMhZe1I=HBJ*!,p:&1U[dC3FoRNKg!8^;\@IgYr(mm,eZ9
k2t^W^Puhb&@2;t$KO8Z,"d*P_qX>8lK/f7f?hLHWh#H6FD>Dh:.[c21GpT_g]6X?&cj=gE,^,YOI2f>
Y.r00hW*\Yr8n"@rT4+An)b86^Q;t^5gAHOk&_(L6YqUlcJJQ_s5j:AoB$VGin`24`kJsZP_43u?;jcp
#!Ogj.4uVFrW)ot#7)5%>(`EQ^!j^r^AP_I]tM/6^Au"F^BM-GL0c\Ip]0LX!!;Zj!!2ut#7))&>(NES
]DB8B^>6O*^;%D\^]2"9^Z<-5]<@K43#2>k#6bbe8Ss?[XNdmIXQZePXTb\iE(h\ghZ*WWlMq.n&Lp@f
O/&c5XmiImXO=3SX.Fi@.hMUY#6bbf8o9?WWn4<MWrT0tX8f3JWs,>aE(qbhhZ*WWlMq%k&LpCg!fWhO
cE$uFd]3PMRXS6f&GQ5.&ji5FjSn9AjRq[8jo=E=joOT)roNt<!9O4B$KL:,j5f@`j4`>KroX7AroO=E
j5]4qjoFNAjoa`+jQ$+!$g$F.k2t^dk2X9g($,GO!!Nm.U"&5brT4.Bip5b+jT+B?k5OEGk2t^`k2PP&
j9FAmj6#LbjSn<Ajn7a9jn@g<jlGM!jp'o/k0nr7!VQL!!<N<0.9M.q[FN"l^=9n'^9X/L64s;#!TX4f
#RqOj*ubn)#R(7n!!rZ.!=UD[J"a6`h7is(qS1Xs$bjBj[A8OU*XDcI!qcNu!<EEI7Ve']bcT[&#HXYP
?o/>n!TO.d"UPbV(DIAf"U!of#Qau4+%L%*UoaEpYH8)-O`3W&"TSN'o`,3t!='`<CQ5(YX1,,7Wh4lO
2%BTeirBAh#n[sj'FtQT"8i/c!!iW+#p;fRMkR/LWs>AZE'tKG!!!!"n,NS%:ora>i8t(%jSS'?jl64#
!p/M)pZ;J;nE0`3qrS"<Qo#$?!5\^<%SESTo]H28oB$&7qrRn;pZ;J:pZ;M;k4.U6jo"6HjlY[ak2igI
($5K,$n=kdMP.#X[^ir[]"G_jjhCf0lG*52%_fWh]"5G][BH6]D+lMkm/Re##Rq:U)_ONjKUJ@(WNiqG
^V.;Y\eMch]tV4m[]l['Ss=qF8LbPl&Io*B!!!&q!"f5<-VS<2Suf<-\%9/_]Y2%nqnN'D!kuF`qS*$E
oY1C?mCs7I]tCtg\[T&RWKMX23#D\s!Ta:k#p;?5FH)]dW2ckuX/rDmXk'WRX:))/Wi;keNHJAe+q!Z:
(Bk*Q$kspE;f78DNgHH=XKAS*X/i8$X8T+1X/DSSNf&@(=Z[`>&.JsMr;cEh#mMD5=)j+dV5UBmX8f9@
XU_G6X/i8"WM5`.B1=Bb!U0U]!"K;Y4^)rcQ_U@RVPg>kWlD(LWiE%rVP^2aRu;Al4sLF$!"&l9$Od^p
2cO[HKaj!+Su&HfWi;noVPgAlri-L-UR[I*LOO)D4<Y@L%13:-!"T8T5$2f[R%gCQVl-JmWiF+?!NN+-
W2HMhV4a'$B1OQe!T3qf!ujgNZFn0!c-b2"iT'%kjp:&1k2b[ck2t_'jpC&0jQ>Lbk2b[cp#Z>:jQ6@&
$KU*tf$V[[^T`D`!?;4$!$)(R2*4KFP.oW1g=O`sbL"elg>Cf<[YJ0_67ifPjT#bl(IE5D]YDb:eCWF4
ioBdq!o`;$roO4@roO4?rT44Dk2te'joFE>joFN:joFNBjpU/(f@A0c^V61L.1=`-'+#^66<A&PPb"VL
X0&Y6[^`r_^AbkK^;%DY^B2-a^AbnG^B;3b^V9NY'"tof[Bm-@X/D\]NdPD03$Sq9nc/[n!rN$.#T"pH
7V[UKW3NkG]tD)B^C\,k]t_.aWh=uE2('+B!!*,o!!!0!!#>n\.R@!MJWcS!W2m)+ZaREV]tV7r^AP_G
^AYeH^@Ar<^Abk[^:_%c[Bd$<Whl;JJo+FM0,k/F!!*9>&1'/%>%`>@OdDK+TqnWdX/tHc!3H!u'!/.6
Vk]oUR?WbeG\9o9.iSitnc/[l!W2p)"VMn+3*'pUQD(;WXR<4cXUM83XfJ1`N,;!5*=rAF!!!)t!"oMN
+>Z>eCOV,%QC4;:Uo15nXPU&lXK8G#VP0WOR$3DRCfs(Y,npOV!;?KW!##PQ-8e7sB7>SrQ'Ri0TqnN`
WiGut!35Fe!35jq&uqn-US46HQ][8\G@si:/0#$!nc/[l!W2p$"VMq,3EHH'M3OU.WiE&[Wskr,X/DVU
MJYg4*Y8JG!!!)t!##SO+Z)SjCOLqtPa@f/TqeK`WiFsW!ii5s&#>qkS=#S'LNmW=6o$&&"jR)_!t-VB
=(lJtP,5\+e(`g@jlYOai8a^s&E;j3k2YUak2b[ajlYI_k2lR($KTpj`O)=uHuNCg"#qA1!T="g!Y\"5
P/H#-f\tuTjlGP#josl-jlY^cqW8.Gk2OqFjO'H37hXe]%Kd7k5#Z!2I#Xo0`mi]"&E`-7jl>Ibk2POc
jQ>Iak2ZC%!9=(@($4N=k2GIbj58M4\uq9QG%t2G+qXpr!"oGB&KN>W5tP3lFFK"*Q_0qOXoku=]>"3X
!5ABG'YCo]Z)FIiQ&^NCEa`'A4>8&u&I&"2!!2lq!!2or!!<-"$P5ErDiUWr[(<ra^?301^@f5J^:h.e
Y+:GX8L4Q/!!<6%!!3#u('4^P(aUq#8m#MBG^PR=S"cg`ZF.9XqnF#_^;%Fs]!elGWM#ZIN.lRr@T,WS
/0bo;"TAB$!rDrt"8i0!!Ta=M!#5S@%2L'71HS*+?YOM)Jr>VVSYE*aorSq/WhQ/POc"^7DId$K7QW7L
)\WY`kl:\arW!9600`ZcOe/DMXK:upk,erkX/MVHFA=n:"Qob#!<ilF)^d:$7Sd<"B6o/aO-Q91VlHim
XVIq<W1]ZINJ)q.De3-L68^;;)\E;VrVup!qu?`t!mCW[!s]8N+Xf008QB/4EHctiMjKm*V5UEfWt_M0
T:M4,LOXMcA6r)'4>8*%'+G*6!;ZZq!WE'+$nstPGE82eVlHcKWsPf)Umd$[:HTU"k5Z7u"Ul%a-S[bT
:gRXEG_(O,PFA/>VQ0Tqri6m9X/i7uUn*p=Mh6P'De30N6oHV@*"`DWrVup!qZ$Tt_Z1PT"Uu7i0geNO
I[e+%i8s+^j6#=_jQ,I`dgO0]NFZ$S/ft`5"Td<W$3MAOJ?$oLg>_2SroO=Dk2bV&joa`+j5g.#%-6I2
k2kX_j5oFcjlH@%#NXjue@L/o)smXn!"Ar4#R_h23)3q3S$^ArqrSLMi8iqTc+K$^BLt'<*>Ah_!P8=3
!qZI8!sT)C()7o;,q_,6Z+n&f^R\M(4uFlC+<DF9&.AmM!r)`q!U9Xl"=RW,SZT3.]Y2&X^Au"-^\>MC
^AktI^'M<YYbI1r1^O9B!"0)8#nIX`(+14W.=D*/&$^O^9gCH`,ps]F(C^`X"TAE$!V-3j!V-6G!!!&l
!"8o3#7D+T(E4>=.Oq.jXUg7Y5VOZ2+rD(/&.AjM"9IE\#m)/BBo/@SWiW;HXU;/3X/MYOH<Ma%!oO%d
"p+u:%M03m(aC,8rN-R'BL=p<-Qj?K((Cl_#R(20\,ZL0oDg!8":#;H&/ZB-,Ut:8X/i8$L.OZd.O$)T
(D@>g#mUS6qZ,aY#m)2DBni%JVQ$TCWrT1!WsYl-VkfiAGZuU$!p0L[!"/u4"q(nP&KVf8+D:YR&"[H'
5;OZ1*$,k)&d\gI!iQ+n!!SJHk2>Acc2\+[5'iU;fA5HJroO4?qrRq?jmhI6jQ6=%!9F(?$01+/k2P=[
k2G2%iQf#i:*Keg!!WhmjlY]e%)2es!"&`,*hBdO\%0&`^AbkQ]t1\a\[f+r"nDWn!Vl]q"8Dj(!WW3\
L7>T`]tV7qmD%u%!5@j8"hqX[U5V5$!!!&q!!rc.!!36>[(a5grk8cT^V7It]tV1m^U[P5!42_1(5]#k
WN)urXU)#/WN3&!Ve?1s!!!*!!;lg&!<<*NE/1<lXM1e>XK%>*0B3$>!WW3$!Y_B3XKAT)XS]-uX9,N(
8Y#hc(P\caV5C-fWrT.)Vkp;gVP@f,kl:\bp](U$!!"TiKqbQHWkYS;WMYVs0`;"7!"/i.!!*-7TrP,n
X/c&tri-("X/8Ls!9aCq5/5CX`lR,uj6#FYd([oKb-VT2!#650Y1M@bk2PObk2k[cjlGRdjQ>UcqrRn?
ro=1Ck2te)j8e<?k549Gio]CajlY^crT47Ek2tderT47Af#UT,g].q_i7m;OhVmMWiTB4ThV-TA`n:@d
!:^$h!UB^c!VZQp"bQZe!5A9D!5AHI!P(_^!"&f8'd,)NS?9?7^%&kl^Au"=^Au"I^C7ii\ZV3/.NT</
!!*3$!!!&t!!!&k!!',!^Au"?^BM=^"TSW*q>dMq!<d6-XT>F^mf<(^$3CGD(a<@CS>rZl\#g(?XK%hB
;BQ_d"98E'mK!.b!1WDY!t,53!hoYr"Dk.;WrT0mWr](YjT#Vh#7qat@>1,HWN*V3r2U7+Whu26;]uqg
"98E'kl:^Nm]-Et"98MA!8[\U&cCbki;VjBjQ#=^k2QC&!63mr$O/\=`n/o+k2kafjSn9AjSn9Ajo4BB
jSn<AjnRs<jnRs?jlGLaqW7h>iq):>j5K(]k2+e2HnGHZ!!d]/k2taak2u[(#j1:2jlY^dk2GD%e,TIL
r;Zfum/R4sQbU9)^B)&Tkl;"r+ZMu-P,kt(]`Z!`^:s<Us1ZCc!5AHIrk8TBV2&GD-P,VF#6Fl-#dqF^
^A>V>^Ap:]!!<6%!s,k2!==AIXTGW,9^)N`"rJjN=+6R5XfS\-#-=o.UQTUl!\tc(mJm@j!!3>#m]?I?
lMpnda8kZ/!==>GWr]4pkl;"o)D!pOI@$Y.Wm%O(X8]+'TT=(g1EHql!!E<&!X5=dWrOa;!!!)f!6G3J
1$%?VjQ>L`k2k_(josf,jQ#C\j8]nr.<)-CgYq;Rio]@bjQ,IcjlYUciWS9'k2kXuk5XN>k5XQAjoOT)
q;qe>k2k\'joaZ+jQ-=&"Q\_,j5g.#$K^:0k2kLWi14!ejo>Xfk2tXbk2YP%joON'rT41Bk2uL?YQ+Y(
pAb=%R_QVOo"P4>?1\-n!!s2qAq?DMZamc`W4rbT^V7Is\$2TeCIfBFq#L9l"p"](%^a!brP&?HotLMm
!WE'!!V??l!W)is!P8=6!!!1Vm]?I^m/RD#.T:,:Q_^X_\#o&"#HXnsO*Oef'^l#&$Dd*l!&DOog&M-W
KC>iAW_Dd[#Ri1^CP.kFVQ/FPaK#QGV4<Kh=?@5c!!*G#m]-=DlN"9l#WLi,iTB1_k2ZF&#3=q/j6#F\
l2V"h%l\*qb1ZsVj6#G"joFK>jp0u0jQ>Udj5oId!9O"<!9O4B$0:7/k2tabk2tb%joOT)qW8+Dk2G@W
^55T.!pfmgW93+=joac*k2lL&"6J\+k+2PR#+P;#qnE0G>l+L$!W<!,!WW3$!#o$rUp@D>^7rC;^BV<[
ZDW^o.JWrD!rN$!$aoH<"26r!!Or-p!!*4Wn#ZVl9(i5b!W<!''Lm/+U8P&na0!gm#-4_uQ$H7Lq#CBq
qu?a'VXCPd0\ZU%!7(WG"GH6E!NJfd!!!&u!!a3/EfQceVlJaW\>oh4V4`ur;]tl9!!2ut!=5FfWrOpK
!3#qu3:u>:jQ>Ock2,M+"W17*[*[^#jp:&.j4(o9?m,RE!;lfsY4(KQiLg/R!WWOo^[Su=^1$g;!!E3#
#;_10\%]Vl^8\m1^BM<\UO+Nmp](=![I1d06iI&c!Q>&t!!<6%#(l9F!)NCj!!<-""=S>OWN=:F_Q<sB
WK:^8pAb3sVXCPd2<FnO!!<6%#(c3C!)WIk!!<-""=S;KV5j$cSZ;mnV2](2pAb3sUA(_`WrP&L!!G+<
jlY\"joFKAjoXZ'!V??r(eVR"k2YHhjoac-jQ-:%"m+h!_bgg7!!07_n)ghSmf3IpR_QVOo"P^K<r`@'
":ZJ%4`@!p]"bqg^X'Y(^:h%YOBF%Z&d879%(5N<"Zubc!!!&S!6P9B"GQ<H&$/2"!WW9.(`k>7N1-cK
XPL"XXUM;1S9d[J*"E&N!"#RkXT1$O!2TYr"G?0D%]Vtu!WW9.)':S<MO:9A!31aR!NMt'R<_@I*=`/O
!"#FgWrOiI!<)s#2s08]p>uM=jQ>U\p](I"7s)r8h>QI9jSe3@jg+%3jp^>5k2YUdj6#@U_g!F%!!0Ce
nE'`2`;nWm!WiOrn%T:EH7_WdH^CnC^;%Fsb.k@!#empTTnQW541+Fj!']]K[K$@0",ZKK$*7\^3C@D1
Su/UUXcKRhX.PDj7kcQlr2oRm!&1&G!W`CXorItj$*%P]3^mY3R\HgFX6Q_kWi2GGDb2];U@,&^1:@2I
!!>FGk2c="#NY%0j6#LW$N:#1$Sd19hWEt[rT41Bj5g4%!TW:]k0rGnjlH:#!9F+@"Q7aa8eh7)!35JL
g&UjIcN!tRQ1)Hn^9OrO\\>em^AP_G^=U-$^]2%H^BD9_[B@42^B6Fq!!;rrWW3&*JF9NATqSEbnu[MG
"g+o-Vk1!XXTL'R!!/eo!XO7Un#HP^Str7YWrT/oX5U)ZWr&h!W2#f]m]-F@!!!&<!8[\X/`c'Tpu_V<
roOULiKBA6`o5q>iTB5#jpBu+k2b[bjQ>Rcd,r:/"Q\Y+k2ZI'$K0n*jlPO^e[0k]nE'c4k2cTU!!<<'
!eL?c!5@j8!5@s;!5A0ANkYS.p:pC;!\XNVUAtAt!!-m)Xb*\(XTBdK!j_ms!!<9&!Ge"%Y,_UM!!:dQ
aT);OroO4>p>uA:roOCFk2taeir8'Aj6#J#joFKAjoXZ(jQG[2joXZ*jm_C5iT0Fhq>dAm"!st]^>ZhY
^Z<-3]tBsbUAt>q)jl>]^T@U>XGe1@!8@JS*1!V*R]?OjWJM\`!4;e/CuXF6o]?/7roO4ArT4IJk2bUc
k2YUbjlH$qQf\e=k2tadk2taek2YUak2cF%o]?52ejZ;5!CX?o^Au"C^B20b^@&`9^A>SE^7i='^Au"I
^Au";^BD9c^Tp;=!:0[d2PunEVl]uo2r4Q/!7:cI2km[[N2luO3;EQT!!TOej6#L_puVeBk2POcjQ6@&
!9F(?"lnb-jQ>J$joji,k2tZjjoa],k2lL&#3=n.k2kaf#3=q+k2YU_nE'i4k2Vi-!!!'!!!OIG^;%Cs
!Pc@%^VRYd^9&'f!9*tZ(Rh,$S#l^]%dF&-!!*q'aK'onorA+]%]'.0EoQ6@k2tXok(;aEjoa],iHV^0
o)Jgn@_2QR!5=f7YeL1PrP&BGE7t<;!!30tX159dXTPY0!!&tu!Wc/rh5c..i2ZmX?)@T%!<g^1k2bNW
k.p*Zir/!?fEB=shZ*`Z"cU-n^RDn;^AYeIVZH8e\Gu[6GHB&kK!"LD!0sG^!X*YGnuIACb,YN+\cD*t
!?L"qjoa],k2`/sWoaKEk2kad@c%1[!7h,R!<<*,OM/!8NkYS.rkAHBq>dYu!XF(RfWBb-kcFidriH1"
VZ6c'HE-qEJucei!36%!!2[X7iW'!*h>ZO:jJV.5joXZ,hYuX;^Zkg5!!3Lb]u[s?^\#8AZ3$s)!XEhK
mB(uBc`I5C!O`""!!3CIWfsK`Wr\jogAoIu"WQ:[j5o@7k(r.'j5f?n!!&qt")kie^>H\W^Ylj.^6&Jp
!!$4'XFmXeXTGSO!QtK!!!-?(W2l5b!igSJn,Tru!s@0;ir/!>j4*4Ck47X:jQ>>HV>pWKYO]G[^X'Xu
]t_=r]e?qsm/R/2SsZX[XTbf.XfSTMhZ3BNdJs:mS$T/VWs,N(X/`0Gq>dSs!JTY7joFJuk(;a[jojN&
k25!l!!<<'EOYq^K"o4<"MVXcM$1ctirB/_!*uS"XdcEnF9:_-^&S6:!*uGCX+IDFWr[8CV#UT#^ZOSG
k(;aEjoaT(jr(N+nGj+$Bs"kR\[oAa]=bhk^V@LshnK0*`kU-?!5@U1&AGln^V7Cp]Xtee]=YVZK,<2@
b5_lLS>iKfX/`5$XK9=AOfeVar2Tq"U2:PB!2]`'<gfe\VPg;iW2ZfrWrT0dX+ID<Wsbr-WMlbnW2QSc
D%`WE&HDlW^;%h<bL>"ng>V2Ti8NbmjrELFk2k^ek2b[djQ,IcjlYXdk2YUdjlY^bk2YL4k4%L9jlPXc
jSe3@ir8'?j87sEj5oFbjQ>Ubjo+<TjlGRbiSs"^in`;>e^MppeA[dfa8joo((;EC1Gq6b=)NSOS"6(A
V6$u3]tV1om(WP7rP&?HgV:M<"2;Ob^AGYK^;%Fs^VBc^'tUfYXeq_ZS"H7:L3@39=B/*u6QcHt!4;eA
#ob6?.P<bN>&/M?M2.%RS"Zg_XfUTcOKAMaq5je#V4sKD&;u6sMhut'@8ooi76X0u(]g<1%1+"%-n6l3
7U'YTKSG0`M3+*rV>dKPX7WFpWiN2#ql9^sq5Y7.U7[j9LkCA:L44)M<D?"R5Y*dN!Or-h!"T/C-9+1N
79Xl!^Y.Q!iT:"""68P(jSn<AjSn9DjQ>UarT4+>roO4AcfWsD!9O1A!9F.A#3=q)k2tU`r8n1>k2tXb
k5O<KdB&XY>XLG06U!(;"p*6SpAiD;!!2or&HW+?$kjU17qm0lL6emK]=blI^Au"H^Au"3^UV#Y^AP_J
^;%FsrP&rY]=bA>NHfPb>WjVT&.AjK"7#rZ!"f57":5PQ+?<G2@rR!eW2m#$p8s%N!j&H(%\JW'@p`M6
0-Lu;#mLJ5OT>1W&HN";#n@[n3`]^"E.F:NW2ZfdWrT0&X5p;]Wr8t1Wi2neLN[08>tZmr'+>0O!s5n2
bQ%qN#7))!E4j`PhYuX?jQ>OcjS\-DjlGOci8jn"!o`;&g?-cEs5j4A)!'i=k2YObk2POci9'.]k24\@
LI*$f"U*6R\c;^2m/RUt#RM4q3(7J5YIhB\^:sBW!5A3BT"b9>rP&`Q]WQZc4YIlg#mCD(!;-<l!fm<j
!!!$'"qVn-2cO[dX/h>ao;rD%XIa)q0-qDC"p4nk!!!&,!87D_!<iZ=+Y5TQDO[T&X/i8qWrT0:X3RaR
WMu>"8MMM.$jHe7l2Uebf`8/T&HNQ!eBR.8i9'+\jlGRbj6#;!joa`-k2l$n]B9.TqW7e=roO4>rT447
fROCe!2BMo!qQBm!Whro!sB>qJ-!*iPJ7+3q7d*I]Uqe8!s8N(!!3#u!!;Ke!s8N'!Mf_o!!!&k!!!&l
!!NE8.;Gf^WNG0^"g"ea4;7km!!!&d!!!)?!8%8O!V69k!V??q!Y?eqUo2M=]rM=:WJNbP!r2fr!UKdd
!p]iM!!3\BdJi82jQ,Icj8J*@jl<3"!9O4B$f^4/j6#LajlYFN7IC/7!<3*!!<3*!!:Bgo!WW3(+'PD@
[Cj3P^Au!D^\tnI^AP_R]XtDP@2JtE!rr<'rVup!rW!'%!<<*#nc/XkqZ$Tt])]qQ$3:,,!uFOiS>E<g
`N@Rj$`pD$TMH4$!!3-#!p0I_!W)is!T3tP!3Q;/!<<*%(eTaTU8b0NX1,,;WMl>X:_Ng/!WW3%jo>A^
qZ$TsqZ)6K!)<rKXOu:ij6#@`k2YUcVWJ9JioK7ajQ>+DLPl3,!.k46!!30$!WE*!!r`0*#TI?;T=2DI
^9GB@^BM<ZTnuASp&G'onc/Xlq>^Kr^&YeGrrN*!"pG]=I>b#)e#gcp"g"Y_F?C',!!!&j!!!)T!1*]c
!WE')"Vam_LngrMWqrcmWs,N!N,q,lp&G'nnc/[l!.k49!!`NP6akY0i8jn"!9:'@!9=(@"m4t$\4dcr
!9jI`!UTjh!<<*#p](L!!!!'16^kp-gqO!(V/nd.rW!!#!!3'!!!;cm!!1"<T)\ro$8mP$XgbD8X--dB
$2=K#!S[U+!;QTs!=C`;SuW!mO'aUJp](<q!.k3u!!P=Ak2YUc\E<8B"lnY*e6)sD!3?/#@J7G9^?!&g
^Au";^B;3b^V9W\!jF$Q^As#h!)NQqU9+Hg*TI-O!9!nX:o(,lWr/muS0!Le]Dr*9jQ>Lbjnn0CioT=`
jSn9Cj6#CYk47X7iV_g<j8A$>j8S0GjQ>F`k2>C_roO3;XT8(qT`>(-j1i=C"hqaL"TSSH!.k4J!!$&k
XT=[imJqh=ec5\OY,h/p"0/Dc"I&nk!!!*!joFKAjoj`)k2tb'k5XQ*k31q-j8J*?j8S0@jo"6Bj6#G#
josl/k2>B2\,_Zl!!<&u!dDDnqS0q_!5@s;!kuF`qS*#nh#N$,li7"dqu?_+Sui!AK)ipl!!2ut!b/41
`N.dp!.CdGS,`Wrk2>@tjp'o.k2t^djo+<Aj8S2ijoXQ)jSS'IjlY^ek2tack2PI\r8n(@jseOTJcPKE
!/:6`!5AEH!5ABG!5>eS!krp\o)O@Bd/X/bq5jXu]WLP&!+_GsX8i6=q5XLqpT":om&S1-!+`bCLB%;g
roO4@"QSS*k261#!p/G%roO=Ci9'.Hjq$P8jQ>Ubk2bUck2kafjlHC&ro4+Ck2?X+!.k42!!<<'TYC<<
&%7RYQ(OqTZaRQ\]=PSg^<+,"^;%Fs]=PYg\Zr9O^;%G\^B&EZM#b6i!Wi@]qQ1+'H?XpuPFA8FXK;E%
h6#kB#ck#-XK%taXfVB$!FGo2!;?Jg!!33%Mu'I`Uj7*4Lln'uUoLGnVl0<jbc;#JVl?\nSscXZqPsX)
!m(Fo!;ca!8`Aamjo4BQ]H\FL6X4`*]%Poic->D1d,k>hroOdRjlYOak2On;f%S3,GimoEroO=Ck2cd6
!.k4,!!!,u!!'M*^CS#?&-)tB$OdIU()Ru>4flc?"MVI6:H/S5*uH+:&0e7U^Au"H^ArkL!4W"/!rDrt
WV`e.XF(EV"U55=#n.CZ'H\usl)imG$`ekD.jYuF(_R5qSGB8eCq'J/!!!)t!!&kmWrf;J$k*+>"pbMA
$kX-e+>K5(WsbhV5qF?"',_Dk)k$N&!,UHkJcOp5!5JNq"Q\_-gEuOm!-6EJ!9F.A"QSY'cnY:q!.+Y,
"QJS+jQ6FSK)iag!?o)S^BD9c^U?H+!!!,t!!-lJg;!0m!2oPk!sNYY^AGYFS#?=X!!*q;qlKms1].4Q
!r;m!=0/O+bcLl0pAb3s>ktK%LWogN!;?Ho)Q<P6!M_LL!!!)s!!-3$b,YN)pAb9u?)t"&WrRkE!.k3u
!!h'9k2t[ck-jj]!<UitjoFH@joA`]!!3;ci;;X:3g]oM!"K$?^;%Fs^V@IK%KHM0"8Mou!>i'1^YQX-
]2AV/!Vl]r/[>8h"hqadWriC;!/LUU;69_u"0JYV$N:#*!r)`r&u!LN!NSN[!!+:;qQ0dd!oj94!9*tZ
;l]br!igeYrVup"p](=-T$+/8W'^1X"!aD<Ws5W*WiN1e!f6oj!!iV_k2t[ck1MK[!!&8@k47X<j6#Lc
k10)(#a4?1k2tUak&@F&pAgrg!<nqh^B(i3p](L!!!!$"!13Z!!kuFad_>ga)YO.4%Yqdq^B(ScaT-nm
r;Zj$L&7tQWAX5H!.rCr!La\q!!3LIXS]+#TcEJ#JcOF'!<e&PWr]%Tnc/Z@bGtZ2'E%q-!!3LIWr&gt
SfO$qZ2b+gjQ,IajQ45J!!k=AjlY^ak2t^pk2k_-j6#KGoDeq/hrOau!TT9O!0I6a!<<*LZhqK>Sd#/p
oDen^^<F=mIgPiL!s/Hk[/7T=\4tf[JcP!7!?e38XT=:^nc/YMbH1eZ#58*"!<>'SqlKmu4bNgQ!!+7:
ql9aQ"S)Nn3i^r8nuDe*#58*"!<>*Qql9ao5H+XR!!f:\jQ,Icj$<)6!T;u@k2tadj4NMnjTFZ-jUUk^
!N"rXj9"K(_9Dt3!;QU$"b","^V7Fs^-qVo!!<-"!<]s\^BM?d^UH`8p&G-r!2'/'!ks0eoDjICe,TLP
B`5%8XKAQ^o`+smrVus#X3IaIWB("[p&G-q!0$fW!j$,<RK0Mk!X*2:ri6.$X/\,O!!!'!!!*/"n>kEH
!i7sZp&G-q!/^TR!ifu:^As)j"q9GOk2G1Z!8d/E#1VetjQ>Ucf&d(nj6",I!!,OKr8n%:&*!YA!9aC_
!WE'"+gCmZ!ktW7oDf$r!!*(b^<XIoX<mH<!E6W0^BD9c^7Pso!5AL7(ngc.!139W!!3'!!.a"0m]?MY
)tO%16EC!c!K7Gj!;?Jh!!+"/ql9^^o)JakrVuqIqlA2H!LFet!!,Kdql9aS%*AR%!;uluMraj!!T@_\
!!Ot6k2tabfB*7tk2tdfEq',7e`Q#Uio]2gmJqh=gAh<V!-Q$R^B(r1o)JakrW!!t^:qt/!kjj&quHNm
!s&D+^AP_HZn@UDZiC,7XSf1$X"`uB!(#qQjK/KbJHPHC!M?IkXT>7C\c@ck!F`#+Wr].Sr;cEh!(+u3
!ig_Pnc/]\Wr/muU*SUrJcP$8#6s&Ik2YUdea3>@iSikYk2taXjoFNBjoO3hnGi`Lhra"]joOPCKE/sk
!=c:3^BD9cVZ6bk!!!&t!!*;3gqWQt"2;O]@.F9u"$QOr!kr7IWrSdm!=>CqXT4XS!!*5!c`I5K:@\Ac
!\aDP!)q2DJcPWI!=>:nWrS@O!!*4sc`7)E:\"Jd!\sPP!*&RjJcO:##D_F'jlYRb@dO-qXT%A^jOWGr
io\Md!:^$ok2tdfjlYP'RK0Pl!H>aN^B;3b;?QIi"9AK&#+Y4uj1bT.rkAK>*q942!N5q3"MVXcU]nO6
MZ<c_XS]+"5l^uT!!*4Xc`I5B(@V;(Q2@ZaOTabGJcOm4!F;`(WroB&63?TU!<e,&Wr\h/n,NHOql9aX
"H*8q!!`Y_j5f@bi9'A+!B]E&k4@^<io]:`R-t"[@-6P4iTB9&Y5n:sV>pZ"[(cIQ!NmI3!!`N)?bX:i
^;&14!L<f[!!!&u!!#gm^B2-`(Wuf1!!3-%V#.7pSJLSm!DTZBXT<tRn,NGQqQ0`1n,S%?gAh6UU&1kk
RMP8j!D]ZAWr[_OqZ-<i!($I^!"tRt[/^6(iVqs@j5tgV!!V6Ajl5F`o&f)s!p/PumJmIRk2YUdiSh?J
P5k[e!(jd"^B;2u"9JH$nc/_8YeL+O!5@%!"1go$!qH<o!>VZM^AbkM^5r<p!oj94!:9ag!WY<_r2g%%
BEIQ$!?.WYXTPR^!!2Ti!>([uXo>F)H2mpGM#bTs!s/HbVu3RsWb;J$!!+%0h5g4L"/\$X!V$-j&=33o
"*jkH!NlEq!!gp5k2YUdh@/]M"cMC&jlYRTjoXT*bO#92DW]sXjoOEcciAXtqZ$VbqnE0>5jSIR$[oV$
^=Bt#^81f1o)Jpp!!!:R]DTDE[1E6:!!E&tJcO@%!/:<P!N.^>!!3F>X4"*MPPtRP!!3=<X8K(#V[NJ(
!!8enYlFcVql9am1[G)C#\^.-X5U)[WfZWK!X3;:r2Tjn$iU,+!lY.u!!,%?roO@Dk-=seli7.scK=-H
f&d"k>3u:p%FsV'jQ>U1jT'l4k5YMq[JR]BV[WV.!!2Ng!@"So^BM?Z/cYkQnGiUj0!kJj!kr(DN<$fq
!=kt'XTOgp!!;Nf!?.BdXmrLrV]u0A!Up'i,Gb4=!)Kj"pAh)k!=kk$WrnLk!!;Nf!?7C)X4OBUWhUg>
!!2Qh!@4B9WrPu?!.k1V!3G>Dk2YUc@-IXkE;nu"j4NJpi3MYK#G^GAjQ>Ua!V$/A!8RVV"@p'$^B)#t
lMq"j!'@R=^B2-];uH[r!rW,l!!*=tqnE<>!!3-#".TA$!!33^X8K(#XD-u#!s8NUV=1PLXT>Ihr;Zfu
nGiRnNVfg]T`>)n!!9t:P5kXc3iDnV!NKl1!:g*l!rt!KeZ/_L7/[)c!V$-j"cN8Y"eG\p!!!)_!.k4:
!!gd2jQ>Lbfad3G!34W4!TMYp!!5aSirnN+jlDMY!65'AGeCf*rkANG5m-KS"&?SF^>?X!^Au"I^B(o:
n,Ndr?b=(f^;%Fj:'%KtU&Y4(XSf1%X"shE!!,9bd]EMNriH4$3q!%L9rn2o!N&'/!.k4K!!-T/r2Tms
1]m%E!C3[5WrT1!Wr](Zmf3A`W;N[sU-SGQJcOC&#7/oCiT9._cKYB4hW*STj4<>rhrNk\b5gr1#1Vet
iTB:,S,fnr!WrFfqnE0;%I=&p[d_&k^Au"H^B'r;n,NJ*ZM_H<^46+^!!U@BNrT4_!.k$L"/6)%!:Bge
W6D@EM[T"S!>;.(XT3)7!!!,e!.k48!!33%J,?8IT*aia!2Ri>!Jh-S!!<3$&tf*&!NKl5!!!+`!5\^@
0')0WjlYWilMq.%k2bXdk2YUdo&^,8k2b[b6gapSQMoqIjPUNR!;?Jl!!<_*^V9Z]!1j)h!!;Th!4i!A
d_>gU%e'H!"e#8&!N[<e!.t7O$3H9jXSo7$M>dJT!Ug!gWm%RGN=,.T!<\#PXT=k+o)O@Bh#INaNN9)X
WrRnR!!!&g!!&n?Wr\+cr;cHi!<[rNWr\P&R/j\r#>jI<k2b[e53i1MaQ2F]joFK4k3(k1jlGRak"4t@
!]B-$roO7BEkMI:!!+CHqnE,Uq#L!d!4i'C!5?jq!M9ql!!-!3r4`9A9)\ej!p9Q8!:9ae*1?]+!+Y<p
!348F!K.BT!!,Ber2g"!4T5<\!K@*#!!++,ql9^,lMpp^gT0nG!Jh0Q!!,Edr2Tjp4oPE]!O;^"!!%!8
jo>\Q!!17'"m4q/iTB1RjoXT*j8S0@6gXjXhWEt]k2sD+!.k4L!!+saqnE,)rVup!mf3?ubeF1L'CPo$
#lD@<]RC(\!.k4'!!+RFqlKi]lMppbbcLl%!"SGt!!W8%!j$)=T)c1t!@jf?WrP?L!!&ncX50fWL(<YP
!!W8#!i]l:_uPbs#,UDCj6#Lar;c6c#Kl,ik2b[ejn\$AjQ>Udjnn0AjlGOfjo@U4!!hTIjQ>Rdf+$pD
JcP!7!Bddf^B(u$rVup"mf3?urkAHId(]US%IsK%!!<3$U&D_/^;$`c!g!E"!!+aMr2g"$-2mlE!Ug!g
Wo1#HXT=@enGiXm!!&&VXTFq(!OVq%!2oku0V\KG!N@FF!!!&g!!&nnX4"$LM@&eQ!s/H&N;KXWQP'>G
!.k1NYl*V`fBN>=aQDXGiq2@6jl?=%!p&G(lfJB2jQ5Fa8*p9]9]kI!j5T3Ao)O@Bh#IID[f!l@]HHM?
!4i$B!5?mr!MBu%!:g*jH+s3k!OOMK!4W"02Q6PU!N[.(!!'%bXl?G`N=5.S!+bu/!Mq*W!0[B`2l-AP
!N?t4!:p0jVTc(AM[SqQ!G&5.Wr\q@j8ac3li7$qr8n"3l2Un)jlHF'!93P2!9<q<!9EV2!9O4B!(lPX
!!rY`r8n!ZM#bWt!WcB6r4`9E*pWe+]%b!j^B'l<n,NUm!%bk!^AYeH:9OYm!!,Nhr2g"#(@(r$X0'XK
!Jq<S!!"2=XT1Q7!.k4L!!,Qer2Tjs([D&$Vp)1BL(<VO!$_9?!'p>[JcOC&#0uAnjQ>UTl2Un1k2c0s
!9=%?!9O.@!9NV1#3=q.k2t\fli77Lk2POcjQ<$6ZN(AB]=ttk]tV$%!!!&f!!'P.^Au"?^YQX*Se1;i
#RS)W]tD%k[tak^!!C:BNW9,WX0)?%!NI+<!:BgeWQ_IFM@AnQ!X>[,rN$%!E;fh;!pou>!9aCg;5gOq
WN)tq*:!S)V9Gt@LCE_Rr;[*-VQ6_rWi;h6rVup"P5rK##6EB7g=Y0:`TdF'_uAcuipPq/j8S0BjlGM%
k4@^8jSe3Aj[/;6#Ku2_f\+lk(:4)9!2ol'EPB3%^;%Fp3pQbI]"buX^[]&=^>ls/Tb$Pk!X,^@rkATM
^7kT1d/\e!!+#K(!NRg<!!'(DXT=FimJm7hT)5VkNrT7T!.k4,!!ll2X/`2#X/IZ:!!&q@Wr\+dr;cBg
!<SbgWroA]!!8Yj\,Za:io]1WjQ=qV!!gd2io]Cbk2c:!!9F.A!94(=kiN'0k2t^d9'cN_L#M1Sk2G5p
^AsGt!-\4R!)<7ho)Jd#rP&?HdD#^N(@;)%[JmoC^;%Foj8ac3m/R,pqQ0`\lMppabcLo"&a]PuVu*Rr
X,6nu!!$I(WrPBM!!&kMX7E:lK+[JN!2KFl!2m"#UAtB#jlYY&k3;pI_r_*_k2t[apZ;J;q;q\<rT4+@
nE'o8k2kaf2s^ME[/T1iiTB:Le,Y(#r;ZhCqS*#%rVup!mf3TI[(3WR\$rgA[fEl9[fX"I]DK>E^:LcC
[g0@M\$``PC]a,,"9AK&#djKD!581.JcOF'!+br.!'BKH#B6K=W2Q\pW;3CmW;`atW2ZipXTGT)W:?hk
W2Q\nWMEVr!U]pg"f;*u!3DdmZN'u9qPsTYlMq0/Tr+W]V5:!`V#dBg"JqrjV5X9l!ii/onYHJdUnsi_
TihEa!!*7tql9^s_uPet!"&Sc!T`DA!:Bgl(8]$\]"c"mq7[*F^;%Cl^X_ECjoXDa](*K=]Y(tc_kR;"
!!fOck2kadk1]&"JcP!7!-e:S!A+>K!;ulu"LJ!?!P&8n!5ed:@f!2,,09i;!!*.rqlKn!!OVq%!2okt
@f!,*,NJj<!!*.pql9ap!RLh!!!!9#k+2PXTB>7tk2b[IoDjICh#IG!qS*"[Y5n+n!<]Y)^Atg5!4W"/
@f!2,+OgD9!!*.rqlKju^AsGt!+Pf*!$V.<VuQi"T_kbiVW7`/!:9ad#Q!SS!!f(WjlY^dk/E2Xa8c3a
qS*"Z_uSTn!<TS(^AtaH!2BMo@f!2,+6`d8!!*+pqlKjte,Y(#r;Zh,qPsT=TE"unTDPYhV>1+C!8%8O
#Q!Sh!:0[cR/Q.KjlX=M!4)Y*GP]&S.G4^B!!*,+qnE->_uPet!+Pf,!$D1?U&Y1eqlKjskl?;8kPtTl
qPsT=U]C;m!1s(g!2PYU_Z0ZAqrRn?a8jfl!L2[CjoE'$!;?Jl!!%6>^AobE!5/@5!O;O:!4U8SK)bm\
qQ0`?T)\kbqlKjtoDjICh#IFaqPsT>Y5n(m!1s(g!2Z+a\,ZL6qW?6,bQ%[*jS\-?^:sZ3!!%6>^AobZ
!2oku!O;O:!4LqgJcP0<!+Pf,!$Im6!204k!2tbTa8c3LqPsT>_uSQm!1j"f!2QduUAt9!qW?uA[f?Ym
jQ>Udk2s>+!.k4L!!%6>^AoaV!!*/+qnE->q#H!HfDkn\qQ0`?ZiKIn!<JkjXT5;l!4)Y*@f!,*+kZk:
!!*+kql9^m_uPet!!iA_r;`Pl#E@g,jlPXe]'03H!9aC_GP]&S.AQtB!!*/+qnE->Nr[&t!+Pf,!$B;_
fDkpQT_khkVmHHu!2okt@f!,*+QNO9!!*+kql9^lcN&Rt!!iD`!9B^O#E@g,jQ>Ud[e'QO!8RVTGP]&S
.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==!2oku!M0+g!2\`VJcP0<!!iA_
ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0!MK=l!3+HJJcP`L!+Pf*!$S!8
!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+qnE-?_uPet!+Pf,!$M7@UAt;q
T_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<!5>f?pAh,l!-e:S!%R%0]`8'7
Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<JbgWrSub!4W"/#Q!T3!6bECNVhi<
^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjtM?(]t!+Pf*!$T8\h#IHVSboGf
V69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%6>^AoaV!!*/+qnE-?q#H!HfDkn\qQ0`?ZiKIn!<JkjXT5>m
!4)Y*@f!,*+kZk:!!*+kql9^n_uPet!!iA_r;`Pl!0-m<!5@[tJcP!7!-e:S!%OcEr;Zj"Z2;99[uUO,
!!$L)XT0Kc!8%8P!MK=l!3*=*pAh,l!+Pf*!$UD']`8'6SboGfV9]-o!!!9#k+2PQNVhi<^@VDW!8RVT
GP]&S.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==!2oku!M0+g!2\`VJcP0<
!!iA_ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0!MK=l!3+HJJcP`L!+Pf*
!$S!8!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+qnE-?_uPet!+Pf,!$M7@
UAt;qT_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<!5>f?pAh,l!-e:S!%R%0
]`8'7Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<JbgWrSub!4W"/#Q!T3!6bEC
NVhi<^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjtM?(]t!+Pf*!$T8\h#IHV
SboGfV69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%6>^AoaV!!*/+qnE-?q#H!HfDkn\qQ0`?ZiKIn!<Jkj
XT5>m!4)Y*@f!,*+kZk:!!*+kql9^n_uPet!!iA_r;`Pl!0-m<!5@[tJcP!7!-e:S!%OcEr;Zj"Z2;99
[uUO,!!$L)XT0Kc!8%8P!MK=l!3*=*pAh,l!+Pf*!$UD']`8'6SboGfV9]-o!!!9#k+2PQNVhi<^@VDW
!8RVTGP]&S.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==!2oku!M0+g!2\`V
JcP0<!!iA_ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0!MK=l!3+HJJcP`L
!+Pf*!$S!8!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+qnE-?_uPet!+Pf,
!$M7@UAt;qT_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<!5>f?pAh,l!-e:S
!%R%0]`8'7Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<JbgWrSub!4W"/#Q!T3
!6bECNVhi<^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjtM?(]t!+Pf*!$T8\
h#IHVSboGfV69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%6>^AoaV!!*/+qnE-?q#H!HfDkn\qQ0`?ZiKIn
!<JkjXT5>m!4)Y*@f!,*+kZk:!!*+kql9^n_uPet!!iA_r;`Pl!0-m<!5@[tJcP!7!-e:S!%OcEr;Zj"
Z2;99[uUO,!!$L)XT0Kc!8%8P!MK=l!3*=*pAh,l!+Pf*!$UD']`8'6SboGfV9]-o!!!9#k+2PQNVhi<
^@VDW!8RVTGP]&S.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==!2oku!M0+g
!2\`VJcP0<!!iA_ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0!MK=l!3+HJ
JcP`L!+Pf*!$S!8!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+qnE-?_uPet
!+Pf,!$M7@UAt;qT_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<!5>f?pAh,l
!-e:S!%R%0]`8'7Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<JbgWrSub!4W"/
#Q!T3!6bECNVhi<^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjtM?(]t!+Pf*
!$T8\h#IHVSboGfV69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%6>^AoaV!!*/+qnE-?q#H!HfDkn\qQ0`?
ZiKIn!<JkjXT5>m!4)Y*@f!,*+kZk:!!*+kql9^n_uPet!!iA_r;`Pl!0-m<!5@[tJcP!7!-e:S!%OcE
r;Zj"Z2;99[uUO,!!$L)XT0Kc!8%8P!MK=l!3*=*pAh,l!+Pf*!$UD']`8'6SboGfV9]-o!!!9#k+2PQ
NVhi<^@VDW!8RVTGP]&S.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==!2oku
!M0+g!2\`VJcP0<!!iA_ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0!MK=l
!3+HJJcP`L!+Pf*!$S!8!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+qnE-?
_uPet!+Pf,!$M7@UAt;qT_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<!5>f?
pAh,l!-e:S!%R%0]`8'7Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<JbgWrSub
!4W"/#Q!T3!6bECNVhi<^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjtM?(]t
!+Pf*!$T8\h#IHVSboGfV69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%6>^AoaV!!*/+qnE-?q#H!HfDkn\
qQ0`?ZiKIn!<JkjXT5>m!4)Y*@f!,*+kZk:!!*+kql9^n_uPet!!iA_r;`Pl!0-m<!5@[tJcP!7!-e:S
!%OcEr;Zj"Z2;99[uUO,!!$L)XT0Kc!8%8P!MK=l!3*=*pAh,l!+Pf*!$UD']`8'6SboGfV9]-o!!!9#
k+2PQNVhi<^@VDW!8RVTGP]&S.^&jC!!*/+qnE-?RK0ht!+Pf,!$Kbkbl@bFT_khkWP8Fs!!$L)WrO==
!2oku!M0+g!2\`VJcP0<!!iA_ScAbMqrRmmM?(]t!-e:S!%Pneh#IHWZ2;99\$#e,!!$L)XT0L.!4W"0
!MK=l!3+HJJcP`L!+Pf*!$S!8!<JbgWrT!l!.k4'!!!9#k-G'S!!&#UjoE,f!4)Y*GP]&S.bOgC!!*/+
qnE-?_uPet!+Pf,!$M7@UAt;qT_khkWTaD7!9aC_@f!,*+f#,:!!*+kql9^nNr[&t!!iA_a8jfl!0-m<
!5>f?pAh,l!-e:S!%R%0]`8'7Z2;99\'G&,!!$L)XT0K:!!*+nqlKjtoDjICh#IFaqPsT>Y5n+n!<Jbg
WrSub!4W"/#Q!T3!6bECNVhi<^:sZ3!!%6>^AobZ!2oku!jVX;!4V"hJcP0<!+Pf,!$Ip7!!*(mqlKjt
M?(]t!+Pf*!$T8\h#IHVSboGfV69lo!!!9#k3)fS!!&#UjoE-F!.k4L!!%'9^B#_arVup"VZ6f#!!KP(
^B;3[!!2rsJcOF'!+#H'!?M:@!!!&1!:Kmi!<<1oqlKjtT)c1t!+,N&!?V@A!!!&V!6P9D!<<1lql9^n
_uPet#6j8Nk2t^dk5>:S!!eGEk2YLaiPXm[JcP!7!H,UJ^AnrH!!!2$!<)s+!Wo14^;%Fr^TRV=OT<9!
!EuT%XT/k1!!!,G!8.>R!<J>]XTY`-ScAf"!;?Jl!!-<(ql9],rVup#kQ&<s!W`=^rMp($X-s"hd/\e!
!!<8XjSn9BjQ<$6#?BgCk2tL^KCf.q!8[\W!?7a2^BD/n!!!)*!:g*r!]dQs]"5GY5lmGT\,ZODNr?'_
X(),0!S.7q!!iTVTrP/nWh_Gc!0[B`'TE!k"K5f1!!2rsVuR)(/Y8i;VP^%Dj8ac3li75`j6#Fbe-MWG
"osn/cHFA*M#bQr!!2rs!!:(=huEl]!!<3&q#CBtYlL6n!!2<a])Vs7!!3-$q#CBrec::%o`+smUAtDt
!!3-$q#CBrqZ)3JJcLB&YlFb)qu?]urVup#h#PLr!sJZ)"8i-!"N:@q!!!'!!!!(r!!<<'!!<&u!!;Ec
JcO^/!!3'!!!9)!r;Zp%!!!)u!!!(^!.k3&!;?Jl!!E?'!!*0!!!!'!!!!&b!3lM(!n..%!!!'!!!!%]
!!!&p!.k4,!!!'!!!!&#!9O7]!M0:C!.k35!!!'!!!30$!Vl_p!!!&S!.k3&!.k3&!.k3&!.k3&!;ult
!VQKn!i#_s!WW>p!.k3p!!!&0!:0[e!<<1i!2fes!Smar!!30$!l"_e!.k3&!.k3&!.k3&!;?JF!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4F!.Y~>

%%EndBinary
grestore
np
gsave
-140.444 382.941 mo
627.556 382.941 li
627.556 -49.0585 li
-140.444 -49.0585 li
-140.444 382.941 li
clp
117.34 109.284 mo
111.373 109.284 105.936 107.016 101.844 103.295 cv
103.28 102.095 li
102.767 101.481 li
101.258 102.743 li
99.4842 101.014 97.9876 98.9999 96.843 96.777 cv
98.8981 94.3408 li
98.2865 93.825 li
96.4579 95.9928 li
95.0735 93.0323 94.2998 89.728 94.2998 86.244 cv
94.2998 73.5194 104.615 63.2041 117.34 63.2041 cv
117.954 63.2041 118.563 63.2282 119.165 63.2754 cv
118.998 63.5958 li
119.707 63.966 li
120.024 63.3588 li
131.484 64.6884 140.38 74.4273 140.38 86.244 cv
140.38 98.9686 130.064 109.284 117.34 109.284 cv
107.197 98.0124 mo
106.436 98.5629 li
104.642 99.9625 li
105.134 100.593 li
106.917 99.2024 li
107.666 98.6607 li
107.197 98.0124 li
109.611 97.2544 mo
109.6 97.2618 li
112.263 95.4927 li
111.821 94.8265 li
109.151 96.5999 li
109.142 96.6061 li
109.611 97.2544 li
116.695 92.0002 mo
114.67 93.0999 li
113.887 93.5729 li
114.301 94.2577 li
115.068 93.794 li
117.076 92.7034 li
116.695 92.0002 li
101.897 89.5446 mo
99.834 91.9904 li
100.445 92.5063 li
102.509 90.0603 li
101.897 89.5446 li
121.792 89.593 mo
120.317 90.2096 li
118.855 90.9124 li
119.202 91.6333 li
120.644 90.9396 li
122.101 90.3311 li
121.792 89.593 li
127.103 87.6893 mo
126.1 87.9793 li
124.045 88.7063 li
124.312 89.4604 li
126.344 88.7416 li
127.325 88.4577 li
127.103 87.6893 li
105.596 85.329 mo
103.483 87.7325 li
104.084 88.2607 li
106.197 85.8572 li
105.596 85.329 li
132.593 86.3707 mo
132.03 86.4596 li
129.438 87.0397 li
129.613 87.8204 li
132.181 87.2457 li
132.717 87.161 li
132.593 86.3707 li
138.155 85.767 mo
135.057 85.9814 li
134.963 85.9962 li
135.088 86.7864 li
135.148 86.777 li
138.169 86.5678 li
138.204 86.5689 li
138.231 85.7693 li
138.155 85.767 li
118.755 82.6209 mo
117.962 82.7302 li
118.4 85.9001 li
119.193 85.7906 li
118.755 82.6209 li
109.324 81.1408 mo
108.017 82.5748 li
107.181 83.5265 li
107.782 84.0547 li
108.612 83.1093 li
109.915 81.6795 li
109.324 81.1408 li
118.092 77.0755 mo
117.296 77.1566 li
117.588 80.0148 li
117.634 80.3529 li
118.427 80.2433 li
118.382 79.921 li
118.092 77.0755 li
113.129 77.0255 mo
110.989 79.3133 li
110.94 79.3668 li
111.531 79.9053 li
111.578 79.854 li
111.575 79.8579 li
113.713 77.5721 li
113.129 77.0255 li
117.011 72.9728 mo
116.911 73.074 li
114.785 75.2807 li
115.362 75.8356 li
117.135 73.9944 li
117.133 74.2827 li
117.159 74.7423 li
117.958 74.6974 li
117.933 74.2658 li
117.954 71.5726 li
117.956 71.5585 li
117.954 71.5584 li
117.954 71.5556 li
117.954 71.5584 li
117.159 71.4831 li
117.155 71.532 li
117.142 73.1028 li
117.011 72.9728 li
120.983 69.015 mo
119.861 70.1052 li
118.703 71.2705 li
119.27 71.8344 li
120.422 70.6755 li
121.54 69.5887 li
120.983 69.015 li
118.108 65.8794 mo
117.931 66.3697 li
117.405 68.8867 li
117.385 69.0937 li
118.182 69.1691 li
118.197 69.0074 li
118.703 66.5881 li
118.861 66.1505 li
118.108 65.8794 li
125.043 65.1474 mo
122.805 67.2434 li
122.703 67.342 li
123.261 67.9157 li
123.356 67.8235 li
125.589 65.7312 li
125.043 65.1474 li
.0666667 .0470588 0 0 cmyk
f
114.962 85.2774 mo
114.962 83.1529 116.685 81.4307 118.809 81.4307 cv
120.934 81.4307 122.656 83.1529 122.656 85.2774 cv
122.656 87.4018 120.934 89.1241 118.809 89.1241 cv
116.685 89.1241 114.962 87.4018 114.962 85.2774 cv
cp
.749722 .679194 .670497 .901457 cmyk
ef
306.745 106.404 mo
294.021 106.404 283.705 96.0887 283.705 83.364 cv
283.705 82.4957 283.753 81.6397 283.847 80.7964 cv
285.12 81.8193 li
285.622 81.1956 li
284.487 80.2841 li
284.558 79.5339 li
284.031 79.4834 li
285.876 68.6067 295.343 60.3241 306.745 60.3241 cv
319.47 60.3241 329.785 70.6394 329.785 83.364 cv
329.785 96.0887 319.47 106.404 306.745 106.404 cv
308.186 104 mo
309.094 105.148 li
309.722 104.652 li
308.802 103.489 li
307.68 102.17 li
307.071 102.688 li
308.186 104 li
304.195 99.4513 mo
305.497 100.892 li
306.091 100.356 li
304.784 98.9104 li
303.914 97.9966 li
303.335 98.5484 li
304.195 99.4513 li
299.533 94.6726 mo
301.679 96.8234 li
302.246 96.2583 li
300.096 94.1036 li
299.977 93.9896 li
299.423 94.5664 li
299.533 94.6726 li
296.981 92.2185 mo
297.693 92.9027 li
298.247 92.3261 li
297.532 91.6388 li
295.907 90.1333 li
295.363 90.7202 li
296.981 92.2185 li
291.503 87.235 mo
293.596 89.1064 li
294.129 88.5102 li
292.032 86.6343 li
291.735 86.3776 li
291.212 86.9823 li
291.503 87.235 li
288.599 84.7211 mo
289.397 85.4116 li
289.92 84.8068 li
289.12 84.1142 li
287.475 82.7333 li
286.961 83.3461 li
288.604 84.725 li
288.599 84.7211 li
.0666667 .0470588 0 0 cmyk
f
304.368 83.3641 mo
304.368 81.7735 305.657 80.4841 307.248 80.4841 cv
308.838 80.4841 310.128 81.7735 310.128 83.3641 cv
310.128 84.9547 308.838 86.2441 307.248 86.2441 cv
305.657 86.2441 304.368 84.9547 304.368 83.3641 cv
cp
.749722 .679194 .670497 .901457 cmyk
ef
220.516 189.981 mo
207.791 189.981 197.476 179.666 197.476 166.941 cv
197.476 154.217 207.791 143.901 220.516 143.901 cv
233.241 143.901 243.556 154.217 243.556 166.941 cv
243.556 179.666 233.241 189.981 220.516 189.981 cv
.0666667 .0470588 0 0 cmyk
f
218.139 166.941 mo
218.139 165.351 219.428 164.061 221.019 164.061 cv
222.609 164.061 223.899 165.351 223.899 166.941 cv
223.899 168.532 222.609 169.821 221.019 169.821 cv
219.428 169.821 218.139 168.532 218.139 166.941 cv
cp
.749722 .679194 .670497 .901457 cmyk
ef
118.4 85.9001 mo
117.962 82.7302 li
118.755 82.6209 li
119.193 85.7906 li
118.4 85.9001 li
117.634 80.3529 mo
117.588 80.0148 li
117.296 77.1566 li
118.092 77.0755 li
118.383 79.9268 li
118.381 79.9125 li
118.427 80.2433 li
117.634 80.3529 li
117.159 74.7423 mo
117.133 74.2827 li
117.155 71.532 li
117.159 71.4831 li
117.956 71.5585 li
117.953 71.5902 li
117.954 71.5556 li
117.933 74.2762 li
117.932 74.2506 li
117.958 74.6974 li
117.159 74.7423 li
117.385 69.0937 mo
117.405 68.8867 li
117.931 66.3697 li
118.108 65.8794 li
118.861 66.1505 li
118.694 66.6146 li
118.709 66.5609 li
118.192 69.0287 li
118.199 68.9843 li
118.182 69.1691 li
117.385 69.0937 li
118.998 63.5958 mo
119.365 62.8934 li
120.058 61.849 li
120.832 60.8892 li
121.455 61.3917 li
120.692 62.3369 li
120.714 62.3071 li
120.043 63.3185 li
120.064 63.2822 li
119.707 63.966 li
118.998 63.5958 li
122.6 59.1707 mo
123.689 58.2126 li
125.117 57.1468 li
125.595 57.7879 li
124.18 58.844 li
124.205 58.8237 li
123.129 59.7714 li
122.6 59.1707 li
127.085 55.7477 mo
128.109 55.0415 li
129.717 53.929 li
130.172 54.5871 li
128.563 55.6999 li
127.539 56.4064 li
127.085 55.7477 li
131.642 52.5229 mo
132.576 51.8219 li
132.552 51.8416 li
134.077 50.4986 li
134.606 51.0991 li
133.069 52.4524 li
132.123 53.1628 li
131.642 52.5229 li
135.8 48.8596 mo
136.557 48.1168 li
136.555 48.1179 li
138.076 46.6128 li
138.639 47.1813 li
137.118 48.6871 li
136.36 49.4305 li
135.8 48.8596 li
139.759 44.9109 mo
141.999 42.625 li
142.57 43.185 li
140.331 45.4707 li
139.759 44.9109 li
143.647 40.8951 mo
144.734 39.7276 li
144.728 39.7352 li
145.791 38.5332 li
146.39 39.0633 li
145.324 40.2691 li
144.233 41.4403 li
143.647 40.8951 li
147.339 36.7184 mo
148.215 35.6542 li
148.203 35.67 li
149.289 34.2077 li
149.931 34.6847 li
148.839 36.155 li
147.956 37.2269 li
147.339 36.7184 li
150.606 32.2337 mo
150.757 32.0002 li
150.743 32.0232 li
151.701 30.2992 li
151.689 30.3229 li
152.094 29.4637 li
152.818 29.8048 li
152.407 30.6759 li
151.436 32.4233 li
151.278 32.668 li
150.606 32.2337 li
153.02 27.2781 mo
153.104 27.0657 li
153.094 27.0957 li
153.798 24.8053 li
154.562 25.0404 li
153.854 27.3459 li
153.764 27.573 li
153.02 27.2781 li
151.657 25.1015 mo
155.174 21.0482 li
156.306 26.294 li
151.657 25.1015 li
.370062 .300176 .305211 .00103761 cmyk
f
307.523 81.7229 mo
307.412 84.9209 li
306.612 84.893 li
306.724 81.6949 li
cp
307.328 87.3195 mo
307.216 90.5175 li
306.416 90.4895 li
306.528 87.2915 li
cp
307.132 92.916 mo
307.02 96.1141 li
306.221 96.0861 li
306.333 92.8881 li
cp
306.936 98.5126 mo
306.824 101.711 li
306.025 101.683 li
306.137 98.4846 li
cp
306.741 104.109 mo
306.629 107.307 li
305.829 107.279 li
305.941 104.081 li
cp
306.545 109.706 mo
306.433 112.904 li
305.634 112.876 li
305.745 109.678 li
cp
306.349 115.302 mo
306.237 118.5 li
305.438 118.472 li
305.55 115.274 li
cp
306.153 120.899 mo
306.042 124.097 li
305.242 124.069 li
305.354 120.871 li
cp
305.958 126.495 mo
305.846 129.693 li
305.046 129.666 li
305.158 126.467 li
cp
305.762 132.092 mo
305.65 135.29 li
304.851 135.262 li
304.962 132.064 li
cp
305.566 137.689 mo
305.454 140.887 li
304.655 140.859 li
304.767 137.661 li
cp
305.371 143.285 mo
305.259 146.483 li
304.459 146.455 li
304.571 143.257 li
cp
305.175 148.882 mo
305.063 152.08 li
304.264 152.052 li
304.375 148.854 li
cp
304.979 154.478 mo
304.867 157.676 li
304.068 157.648 li
304.18 154.45 li
cp
304.783 160.075 mo
304.783 160.078 li
303.984 160.05 li
303.984 160.047 li
cp
306.81 159.348 mo
304.244 164.061 li
302.013 159.18 li
cp
.252415 .199252 .203769 0 cmyk
f
220.324 165.771 mo
220.344 162.571 li
221.144 162.576 li
221.124 165.776 li
cp
220.359 160.171 mo
220.36 160.07 li
220.419 156.967 li
221.219 156.982 li
221.16 160.083 li
221.16 160.078 li
221.159 160.176 li
cp
220.465 154.567 mo
220.467 154.471 li
220.61 151.36 li
221.41 151.397 li
221.266 154.503 li
221.267 154.492 li
221.265 154.583 li
cp
220.726 148.95 mo
220.916 146.497 li
220.994 145.751 li
221.79 145.834 li
221.712 146.575 li
221.713 146.564 li
221.523 149.012 li
cp
221.269 143.353 mo
221.512 141.615 li
221.774 140.177 li
222.561 140.321 li
222.3 141.75 li
222.303 141.734 li
222.061 143.464 li
cp
222.288 137.812 mo
222.431 137.203 li
223.036 135.204 li
223.232 134.7 li
223.978 134.989 li
223.787 135.48 li
223.797 135.451 li
223.201 137.422 li
223.207 137.398 li
223.066 137.996 li
cp
224.199 132.465 mo
224.587 131.688 li
225.556 130.198 li
225.982 129.703 li
226.588 130.225 li
226.18 130.699 li
226.212 130.656 li
225.271 132.105 li
225.293 132.066 li
224.915 132.823 li
cp
227.758 128.002 mo
227.991 127.809 li
229.546 126.904 li
230.672 126.439 li
230.977 127.178 li
229.877 127.633 li
229.925 127.61 li
228.422 128.484 li
228.476 128.446 li
228.268 128.618 li
cp
232.994 125.688 mo
233.205 125.626 li
235.247 125.23 li
236.208 125.119 li
236.3 125.914 li
235.354 126.023 li
235.385 126.019 li
233.376 126.408 li
233.411 126.4 li
233.217 126.456 li
cp
238.625 124.923 mo
239.602 124.875 li
241.852 124.898 li
241.869 124.899 li
241.818 125.698 li
241.811 125.697 li
241.833 125.698 li
239.605 125.675 li
239.629 125.675 li
238.664 125.722 li
cp
244.284 125.064 mo
246.345 125.305 li
247.475 125.495 li
247.342 126.284 li
246.222 126.095 li
246.242 126.098 li
244.191 125.859 li
cp
249.848 125.967 mo
250.619 126.138 li
252.596 126.696 li
252.977 126.83 li
252.712 127.585 li
252.343 127.455 li
252.367 127.463 li
250.412 126.911 li
250.434 126.917 li
249.674 126.748 li
cp
255.245 127.695 mo
256.077 128.058 li
257.521 128.851 li
258.114 129.276 li
257.648 129.926 li
257.075 129.515 li
257.115 129.541 li
255.708 128.768 li
255.741 128.784 li
254.925 128.429 li
cp
260.01 130.885 mo
261.057 132.078 li
262.026 133.414 li
261.378 133.883 li
260.42 132.562 li
260.444 132.592 li
259.409 131.413 li
cp
263.265 135.537 mo
263.761 136.494 li
264.504 138.161 li
264.626 138.479 li
263.88 138.767 li
263.761 138.459 li
263.769 138.477 li
263.035 136.83 li
263.046 136.851 li
262.555 135.905 li
cp
265.447 140.76 mo
266.328 143.551 li
266.399 143.841 li
265.623 144.033 li
265.554 143.755 li
265.561 143.78 li
264.684 141.001 li
cp
266.973 146.172 mo
267.258 147.329 li
267.648 149.318 li
266.863 149.473 li
266.474 147.492 li
266.479 147.511 li
266.196 146.363 li
cp
268.095 151.69 mo
268.6 154.817 li
268.606 154.858 li
267.814 154.967 li
267.809 154.931 li
267.81 154.94 li
267.305 151.818 li
cp
268.923 157.246 mo
269.093 158.712 li
269.258 160.436 li
268.462 160.512 li
268.297 158.792 li
268.298 158.8 li
268.128 157.338 li
cp
269.447 162.837 mo
269.462 163.032 li
269.591 166.046 li
268.791 166.081 li
268.663 163.073 li
268.663 163.086 li
268.649 162.897 li
cp
269.65 168.465 mo
269.63 171.665 li
268.83 171.659 li
268.85 168.459 li
cp
269.528 174.08 mo
269.511 174.406 li
269.321 176.587 li
269.229 177.297 li
268.435 177.193 li
268.526 176.493 li
268.525 176.509 li
268.714 174.343 li
268.713 174.358 li
268.729 174.039 li
cp
268.865 179.689 mo
268.687 180.665 li
268.23 182.515 li
268.117 182.855 li
267.358 182.603 li
267.466 182.277 li
267.457 182.307 li
267.908 180.485 li
267.902 180.51 li
268.078 179.545 li
cp
267.254 185.134 mo
266.993 185.719 li
266.194 187.027 li
265.446 187.892 li
264.841 187.37 li
265.567 186.529 li
265.528 186.581 li
266.297 185.324 li
266.273 185.369 li
266.524 184.808 li
cp
263.504 189.479 mo
262.767 189.946 li
261.326 190.643 li
260.566 190.924 li
260.288 190.174 li
261.03 189.899 li
260.995 189.914 li
262.398 189.236 li
262.358 189.258 li
263.076 188.803 li
cp
258.246 191.647 mo
258.136 191.678 li
256.431 192.035 li
255.051 192.24 li
254.933 191.449 li
256.302 191.245 li
256.279 191.249 li
257.959 190.898 li
257.933 190.904 li
258.029 190.877 li
cp
252.632 192.449 mo
251.133 192.56 li
249.403 192.548 li
249.409 191.748 li
251.122 191.76 li
251.09 191.761 li
252.572 191.651 li
cp
246.983 192.493 mo
246.014 192.432 li
244.449 192.28 li
243.77 192.188 li
243.876 191.395 li
244.549 191.486 li
244.534 191.484 li
246.085 191.635 li
246.071 191.634 li
247.032 191.694 li
cp
241.364 191.781 mo
240.414 191.553 li
239.207 191.154 li
238.272 190.718 li
238.61 189.993 li
239.524 190.419 li
239.481 190.402 li
240.65 190.788 li
240.617 190.779 li
241.551 191.003 li
cp
236.113 189.56 mo
234.851 188.744 li
233.503 187.641 li
234.009 187.022 li
235.34 188.111 li
235.304 188.085 li
236.547 188.888 li
cp
231.712 185.995 mo
231.033 185.334 li
229.501 183.65 li
230.093 183.112 li
231.616 184.787 li
231.599 184.769 li
232.27 185.421 li
cp
227.365 184.239 mo
226.172 179.006 li
231.074 181.191 li
cp
.370062 .300176 .305211 .00103761 cmyk
f
.749722 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /JAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005bc6670
676d000000000000067800000d2b676c796600000000000039b800001e2e
6865616400000000000013a4000000366868656100000000000013dc0000
0024686d747800000000000014000000005c6c6f6361000000000000145c
000000306d617870000000000000148c000000206e616d65000000000000
14ac000000207072657000000000000014cc000024eb6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000051a
001500a0fff8ff77fff803480066015401cc00ac00a200b4008c0101006e
00000000000000000000011f000a04e2001400b4fff6035c00140028fdda
0568fea2ffef405a868574737271706f6e6d6c6b6a696867666564625f5e
5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e
3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a
8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b
525845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001
600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2c45234560234560234560
23766818b08062202d2cb00426b00426b00425b0042545234520b0032660
62636820b0032661658a2344442d2c2045b0005458b040442045b0406144
1b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b0
1423421b2121592d2c4b515820b0032545695358441b2121591b2121592d
2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d
2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d
2cb0164358b00326458a586466b01f601b64b020606620581b21b04059b0
01615923586559b02923442310b029e01b2121212121592d2cb0164358b0
04254564b020606620581b21b04059b0016123586559b0292344b00425b0
0725082058021b0359b0052510b004252046b0042523423cb0072510b006
252046b00425b0016023423c2058011b0059b0052510b00425b029e0b007
2510b00625b029e0b00425b00725082058021b0359b00425b003254348b0
0625b00325b0016043481b2159212121212121212d2cb0164358b0042545
64b020606620581b21b04059b0016123581b6559b0292344b00525b00825
082058021b0359b0042510b005252046b0042523423cb00425b0072508b0
072510b006252046b00425b0016023423c2058011b0059b0042510b00525
b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b
0359b00525b003254348b00425b0072508b00625b00325b0016043481b21
59212121212121212d2c02b00425202046b004252342b0052508b0032545
48212121212d2c02b0032520b0042508b0022543482121212d2c45232045
1820b00050205823652359236820b040505821b04059235865598a60442d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2c
b002435458b0462b1b21212121592d2cb002435458b0472b1b212121592d
2cb002435458b0482b1b21212121592d2cb002435458b0492b1b21212159
2d2c2320b000508a8a64b10003255458b0401bb10103255458b005438b59
b04f2b5923b0622b2321235865592d2cb108000c215460432d2c01462346
6023466123201020468a61b8ff80628ab140408a704560683a2d2c208a23
49648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb901000002435258b2054008ba0180000901401bb901
800002435258b2054008b80200b109401bb2054008ba0100000901005959
59b9400000808855b94000020063b8040088555a58b30c000d011bb30c00
0d0159595942424242422d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2cb0022563b0
206066b00225b82000626023622d2c204569442d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
b12801885158b94000040063b8080088545c1bb001592d2cb12801885158
b94000040063b8080088545c1bb001592d000001000000063333a1099dfd
5f0f3cf50019080000000000bbeb7ccc00000000d5968a66fbfafd8009ec
083600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000017040e000001cf000003e8
00ac020400ac06d700ac03ad004703e6000f03d5005c0434006003fb005d
04340099043400990438005a0434009902ca00990321005102ae0021039d
002201ff002a040e00ae040e0072040e0067040e0030000000bf00bf0157
01aa026c035f03d304a50554061306a9074c07eb089a09240a0b0a9d0b69
0ba30c6d0d280e3d0f17000100000017005900050000000000020010002f
0087000012360235000000000000000100120001000000000006000e0000
4141414141432b43616c69627269b10903415302c802c60038001f02c702
c60038001f02dd003802da005502d9003802d7005502d8003802d7005502
d6003802d5005502d4003802d3005502d2003802d1005502bf003802be00
5502bd003802bc0055000402db003402db005402db0003003402db005402
db006402db00a402db00d402db0005006b02d50001000b02d10001001402
c2004402c2006402c2007402c2009402c2000500a402be000100a402bc00
0100200284b40918014a20b80283b40918014a20b80282b40918014a20b8
0281b40918014a20b80280b40918014a20b8027fb40918014a20b8027eb4
0918014a20b8027db40918014a20b8027cb40918014a20b8027bb4091801
4a20b8027ab40918014a20b80279b40918014a20b80278b40918014a20b8
0277b40918014a20b80276b40918014a20b80275b40918014a20b80274b4
0918014a20b80273b40918014a20b80271b40918014a20b80270b4091801
4a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a20b8
026cb40918014a20b8026bb40918014a20b8026ab40918014a20b80269b4
0918014a20b80268b40918014a20b80267b40918014a20b80266b4091801
4a20b80265b40918014a20b80264b40918014a20b80263b40918014a20b8
0262b40918014a20b80261b40918014a20b80260b40918014a20b8025fb4
0918014a20b8025eb40918014a20b8025db40918014a20b8025cb4091801
4a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a20b8
0258b40918014a20b80257b40918014a20b80256b40918014a20b80255b4
0918014a20b80254b40918014a20b80253b40918014a20b80252b4091801
4a20b80251b40918014a20b80250b40918014a20b8024fb40918014a20b8
024eb40918014a20b8024db40918014a20b8024cb40918014a20b8024bb4
0918014a20b8024ab40918014a20b80249b40918014a20b80248b4091801
4a20b80247b40918014a20b80246b40918014a20b80245b40918014a20b8
0244b40918014a20b80243b40918014a20b80242b40918014a20b80241b4
0918014a20b80240b40918014a20b8023fb40918014a20b8023eb4091801
4a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a20b8
023ab40918014a20b80239b40918014a20b80238b40918014a20b80237b4
0918014a20b80236b40918014a20b80235b40918014a20b80234b4091801
4a20b80233b40918014a20b80232b40918014a20b80231b40918014a20b8
0230b40918014a20b8022fb40918014a20b8022eb40918014a20b8022db4
0918014a20b8022cb40918014a20b8022bb40918014a20b8022ab4091801
4a20b80229b40918014a20b80228b40918014a20b80227b40918014a20b8
0226b40918014a20b80225b40918014a20b80224b40918014a20b80223b4
0918014a20b80222b40918014a20b80221b40918014a20b80220b4091801
4a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a20b8
021cb40918014a20b8021bb40918014a20b8021ab40918014a20b80219b4
0918014a20b80218b40918014a20b80217b40918014a20b80216b4091801
4a20b80215b40918014a20b80214b40918014a20b80213b40918014a20b8
0212b40918014a20b80211b40918014a20b80210b40918014a20b8020fb4
0918014a20b8020eb40918014a20b8020db40918014a20b8020cb4091801
4a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a20b8
0208b40918014a20b80207b40918014a20b80206b40918014a20b80205b4
0918014a20b80204b40918014a20b80203b40918014a20b80202b4091801
4a20b80201b40918014a20b80200b40918014a20b801ffb40918014a20b8
01feb40918014a20b801fdb40918014a20b801fcb40918014a20b801fbb4
0918014a20b801fab40918014a20b801f9b40918014a20b801f8b4091801
4a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a20b8
01f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801f1b4
0918014a20b801f0b40918014a20b801efb40918014a20b801eeb4091801
4a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a20b8
01eab40918014a20b801e9b40918014a20b801e8b40918014a20b801e7b4
0918014a20b801e6b40918014a20b801e5b40918014a20b801e4b4091801
4a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20b8
01e0b40918014a20b801dfb40918014a20b801deb40918014a20b801ddb4
0918014a20b801dcb40918014a20b801dbb40918014a20b801dab4091801
4a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a20b8
01d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801d3b4
0918014a20b801d2b40918014a20b801d1b40918014a20b801d0b4091801
4a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a20b8
01ccb40918014a20b801cbb40918014a20b801cab40918014a20b801c9b4
0918014a20b801c8b40918014a20b801c7b40918014a20b801c6b4091801
4a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a20b8
01c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801bfb4
0918014a20b801beb40918014a20b801bdb40918014a20b801bcb4091801
4a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a20b8
01b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801b5b4
0918014a20b801b4b40918014a20b801b3b40918014a20b801b2b4091801
4a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a20b8
01aeb40918014a20b801adb40918014a20b801acb40918014a20b801abb4
0918014a20b801aab40918014a20b801a9b40918014a20b801a8b4091801
4a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a20b8
01a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801a1b4
0918014a20b801a0b40918014a20b8019fb40918014a20b8019eb4091801
4a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a20b8
019ab40918014a20b80199b40918014a20b80198b40918014a20b80197b4
0918014a20b80196b40918014a20b80195b40918014a20b80194b4091801
4a20b80193b40918014a20b80192b40918014a20b80191b40918014a20b8
0190b40918014a20b8018fb40918014a20b8018eb40918014a20b8018db4
0918014a20b8018cb40918014a20b8018bb40918014a20b8018ab4091801
4a20b80189b40918014a20b80188b40918014a20b80187b40918014a20b8
0186b40918014a20b80185b40918014a20b80184b40918014a20b80183b4
0918014a20b80182b40918014a20b80181b40918014a20b80180b4091801
4a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a20b8
017cb40918014a20b8017bb40918014a20b8017ab40918014a20b80179b4
0918014a20b80178b40918014a20b80177b40918014a20b80176b4091801
4a20b80175b40918014a20b80174b40918014a20b80173b40918014a20b8
0172b40918014a20b80171b40918014a20b80170b40918014a20b8016fb4
0918014a20b8016eb40918014a20b8016db40918014a20b8016cb4091801
4a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a20b8
0168b40918014a20b80167b40918014a20b80166b40918014a20b80165b4
0918014a20b80164b40918014a20b80163b40918014a20b80162b4091801
4a20b80161b40918014a20b80160b40918014a20b8015fb40918014a20b8
015eb40918014a20b8015db40918014a20b8015cb40918014a20b8015bb4
0918014a20b8015ab40918014a20b80159b40918014a20b80158b4091801
4a20b80157b40918014a20b80156b40918014a20b80155b40918014a20b8
0154b40918014a20b80153b40918014a20b80152b40918014a20b80150b4
0918014a20b8014fb40918014a20b8014eb40918014a20b8014cb4091801
4a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a20b8
0148b40918014a20b80147b40918014a20b80146b40918014a20b80145b4
0918014a20b80144b40918014a20b80143b30918014ab80284b21e3e1fb8
0283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8027f
b21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027bb21e
3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d431f
b80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431fb802
72b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb8026eb2
1d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab21c45
1fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c441fb8
0265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb80261
b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025db21c
451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451f
b80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb802
54b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb80250b2
1c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb21c45
1fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a1fb8
0247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb80243
b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023fb21b
4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b4b1f
b8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1fb802
36b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb80232b2
1b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb21b4c
1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c1fb8
0229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225
b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221b21b
4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b4c1f
b8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1fb802
18b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb80214b2
1a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b21a4e
1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e1fb8
020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb80207
b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203b219
501fb80202b219511fb80201b219511fb80200b219511fb801ffb219511f
b801feb219501fb801fdb219511fb801fcb219511fb801fbb219511fb801
fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b2
19511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b21854
1fb801f1b218541fb801f0b218531fb801efb218541fb801eeb218541fb8
01edb218541fb801ecb218531fb801ebb218531fb801eab218541fb801e9
b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5b218
541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218541f
b801e0b218531fb801dfb218531fb801deb218541fb801ddb218541fb801
dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801d8b2
18541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b21757
1fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b217561fb8
01cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb801cb
b217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7b217
571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217561f
b801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561fb801
beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801bab2
17571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b21757
1fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b1fb8
01b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb801ad
b2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9b216
3f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b2165b1f
b801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801
a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb8019cb2
165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2163e
1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e1fb8
0193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8018f
b2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018bb216
5b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b2165b1f
b80186b215611fb80185b215621fb80184b215621fb80183b215661fb801
82b215661fb80181b215551fb80180b215451fb8017fb215361fb8017eb2
15361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab21564
1fb80179b215661fb80178b215661fb80177b215661fb80176b215661fb8
0175b215661fb80174b215661fb80173b215451fb80172b215621fb80171
b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016db215
661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215621f
b80168b215621fb80167b215611fb80166b215641fb80165b215641fb801
64b215661fb80163b215661fb80162b215661fb80161b215661fb80160b2
15661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb21545
1fb8015bb215361fb8015ab215611fb80159b215621fb80158b215621fb8
0157b215631fb80156b215641fb80155b215661fb80154b215661fb80153
b215661fb80152b215661fb80151b214401fb80150b214551fb8014fb214
561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214401f
b8014ab214411fb80149b214401fb80148b214401fb80147b214411fb801
46b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb80142b2
12461fb80141b212461fb80140b212461fb8013fb212461fb8013eb21244
1fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb8
0139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb80135
b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131b211
551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211591f
b8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb801
28b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b2
11561fb80123b211571fb80122b211581fb80121b211591fb80120b2115a
1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8
011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117
b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b210
5f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1f
b8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb801
0ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2
105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f
1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f
621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641f
f40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f
621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671f
e50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e
681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311f
d60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d
2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1f
c70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40ff
c00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c
741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741f
b10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b
7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1f
a20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b
7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f
930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0a
a71f8503251f8403381f8301381f8255805581ab80557f557d557eab7d55
0b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a55795577
5578ab7755ba028600660285403c5576ab755504751475747503f47501ab
750144750130750102007510752075030c7455725573ab72550072507280
72b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d10
4671556f5570ab6f556e666d556a03251f6938675568ab67556638645565
ab645563386255613860555f385d555eab5d555c385a555bab5a55593858
555703251f5638545555ab54555338515552ab51554f384e554e03251f4d
384b554cab4b554a38485549ab4855473846554503381f001c101c201c03
10b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03
120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018292c
460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3164d
5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0401f162326460f1501
0f151f150245ef1501860003012001010001100120010308b8ffc0b40115
1f4603bd0100010000050001019000542b4bb80800524bb008505bb00188
b02553b00188b040515ab00688b000555a5b58b101018e59b101024354b0
144b515a58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb0
805358b20340401d42594bb0ff5358b20300001d42592b5e7375732b5840
3d0011e011f0110315bf10cf10020f0f010f0fff0f02400f3135460f0e1f
0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d31
3746b8ffc040270c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d
30460003012001010001100120010308b8ffc0b301151f462b5e7375732b
2b745e732b2b5e73742b73742b7374745e735901755e73742b2b2b2b5e73
2b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f
73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff0284006402
830064028200640281006402800064027f0064027e0064027d0064027c00
64027b0064027a0064027900640278006402770064027600640275006402
740064027300640271006402700064026f0064026e0064026d0064026c00
64026b0064026a0064026900640268006402670064026600640265006402
64006402630064026200640261006402600064025f0064025e0064025d00
64025c0064025b0064025a00640259006402580064025700640256006402
5500640254006402530064025200640251006402500064024f0064024e00
64024d0064024c0064024b0064024a006402490064024800640247006402
460064024500640244006402430064024200640241006402400064023f00
64023e0064023d0064023c0064023b0064023a0064023900640238006402
370064023600640235006402340064023300640232006402310064023000
64022f0064022e0064022d0064022c0064022b0064022a00640229006402
280064022700640226006402250064022400640223006402220064022100
6402200064021f0064021e0064021d0064021c0064021b0064021a006402
190064021800640217006402160064021500640214006402130064021200
640211006402100064020f0064020e0064020d0064020c0064020b006402
0a00640209006402080064020700640206006402050064020441ff006402
03006402020064020100640200006401ff006401fe006401fd006401fc00
6401fb006401fa006401f9006401f8006401f7006401f6006401f5006401
f4006401f3006401f2006401f1006401f0006401ef006401ee006401ed00
6401ec006401eb006401ea006401e9006401e8006401e7006401e6006401
e5006401e4006401e3006401e2006401e1006401e0006401df006401de00
6401dd006401dc006401db006401da006401d9006401d8006401d7006401
d6006401d5006401d4006401d3006401d2006401d1006401d0006401cf00
6401ce006401cd006401cc006401cb006401ca006401c9006401c8006401
c7006401c6006401c5006401c4006401c3006401c2006401c1006401c000
6401bf006401be006401bd006401bc006401bb006401ba006401b9006401
b8006401b7006401b6006401b5006401b4006401b3006401b2006401b100
6401b0006401af006401ae006401ad006401ac006401ab006401aa006401
a9006401a8006401a7006401a6006401a5006401a4006401a3006401a200
6401a1006401a00064019f0064019e0064019d0064019c0064019b006401
9a0064019900640198006401970064019600640195006401940064019300
64019200640191006401900064018f0064018e0064018d0064018c006401
8b0064018a00640189006401880064018700640186006401850064418001
84006401830064018200640181006401800064017f0064017e0064017d00
64017c0064017b0064017a00640179006401780064017700640176006401
7500640174006401730064017200640171006401700064016f0064016e00
64016d0064016c0064016b0064016a006401690064016800640167006401
660064016500640164006401630064016200640161006401600064015f00
64015e0064015d0064015c0064015b0064015a0064015900640158006401
570064015600640155006401540064015300640152006401500064014f00
64014e0064014c0064014b0064014a006401490064014800640147006401
4600640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b007373737373
73742b2b2b2b2b2b2b2b2b2b185f5e0000>
[7727 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 852 4 <000100acfffa062b050e003c00d6b0852b584010603e703e020d3030172f
2f0a2e18181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1a
b8fff6b30c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d
0a100f014d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc04019
0b014d002436510b18170d2f18312e061f28511f5512550555003f3f3f3f
12173911333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311
393d2f3333113331305d1b401436510b18170d2f18312e061f28511f5512
55055500183f3f3f3f12173911333f30315925140e0223222e0235112301
0e0323222e0227012311140e0223222e02351134363333321e0217013301
3e033333321e0215062b08141f191721130802fe33030b151d14151e140b
02fe470108142019182013072c1b68203024180901770501860b1a1f2619
6d0f1b130c1a080c070505070c080467fb94070a070304070a06046cfb99
080c070505070c0804a62a240c1a281bfc5703a61e2a190b09131d15>JAAAAA+Calibri AddT42Char 
1 686 3 <000100acfffa0158051400150061b0852b58b73f174f17af170300b8ffe8
b310014d00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8
ffe8b30b014d00ba0211000affc0b715014d0a10520555003f3f012f2be1
2b2b2b2b2b31305d1bb31052055500183f3f30315925140e0223222e0235
11343e0233321e02150158081421191822140809152117192114081a080c
070505070c0804da080c070505070c08>JAAAAA+Calibri AddT42Char 
1 3736 12 <0002005affed03de03ca0013002700c9b0852b58401c3f29012812012911
01260d01260c012608012607012a03012902011eb8ffe8b310014d1eb8ff
f0b30f014d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1e
b8020a401e2f0a010a141810014d14100f014d14200d014d14120c014d14
180b014d14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b801
02b1054d003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d
5d5d5d5d5d5d5d5d1bb10f19b80101b46c0f4a0523b80102b26c054d0018
3f2b3f2b30315901140e0223222e0235343e0233321e0207342e0223220e
0215141e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e
6a4f496944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427e
b47c49826239345f824d4a826139345e8200>JAAAAA+Calibri AddT42Char 
1 1726 6 <0001000ffffa03d7050e00220080b0852b58b718400d014d181100b8ffc0
b40d014d0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06
b8fff6b30c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612
b80128b31d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b31301b
b2061d12b80128b46c1d510c5500183f3f2b3230315901140e0223211114
0e0223222e02351121222e0235343e023321321e0203d704090d08fe9408
14211918221408fe94080d080505080d080384080d090404c4131c1108fb
9e080c070505070c08046208111c13131d120808121d>JAAAAA+Calibri AddT42Char 
1 5142 16 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18>JAAAAA+Calibri AddT42Char 
1 6736 21 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>JAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>JAAAAA+Calibri AddT42Char 
JAAAAA+Calibri /CharStrings get begin
/g4 4 def
/g3 3 def
/g12 12 def
/g6 6 def
/g16 16 def
/g21 21 def
end
JAAAAA+Calibri /Encoding get
dup 33 /g4 put
dup 34 /g3 put
dup 35 /g12 put
dup 36 /g6 put
dup 37 /g16 put
dup 38 /g21 put
pop
end
%ADOEndSubsetFont
/HSXFSX+Calibri /JAAAAA+Calibri findfont ct_VMDictPut/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 217{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf98.1062 53.6614 mo(!"#$)[8.19996 2.39999 5.09993 0 ]xsh%ADOBeginSubsetFont: LAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /LAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005bc6670
676d000000000000067800000d2b676c79660000000000003948000006b2
6865616400000000000013a4000000366868656100000000000013dc0000
0024686d74780000000000001400000000106c6f63610000000000001410
0000000a6d617870000000000000141c000000206e616d65000000000000
143c0000002070726570000000000000145c000024eb6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000051a
001500a0fff8ff77fff803480066015401cc00ac00a200b4008c0101006e
00000000000000000000011f000a04e2001400b4fff6035c00140028fdda
0568fea2ffef405a868574737271706f6e6d6c6b6a696867666564625f5e
5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e
3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a
8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b
525845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001
600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2c45234560234560234560
23766818b08062202d2cb00426b00426b00425b0042545234520b0032660
62636820b0032661658a2344442d2c2045b0005458b040442045b0406144
1b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b0
1423421b2121592d2c4b515820b0032545695358441b2121591b2121592d
2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d
2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d
2cb0164358b00326458a586466b01f601b64b020606620581b21b04059b0
01615923586559b02923442310b029e01b2121212121592d2cb0164358b0
04254564b020606620581b21b04059b0016123586559b0292344b00425b0
0725082058021b0359b0052510b004252046b0042523423cb0072510b006
252046b00425b0016023423c2058011b0059b0052510b00425b029e0b007
2510b00625b029e0b00425b00725082058021b0359b00425b003254348b0
0625b00325b0016043481b2159212121212121212d2cb0164358b0042545
64b020606620581b21b04059b0016123581b6559b0292344b00525b00825
082058021b0359b0042510b005252046b0042523423cb00425b0072508b0
072510b006252046b00425b0016023423c2058011b0059b0042510b00525
b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b
0359b00525b003254348b00425b0072508b00625b00325b0016043481b21
59212121212121212d2c02b00425202046b004252342b0052508b0032545
48212121212d2c02b0032520b0042508b0022543482121212d2c45232045
1820b00050205823652359236820b040505821b04059235865598a60442d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2c
b002435458b0462b1b21212121592d2cb002435458b0472b1b212121592d
2cb002435458b0482b1b21212121592d2cb002435458b0492b1b21212159
2d2c2320b000508a8a64b10003255458b0401bb10103255458b005438b59
b04f2b5923b0622b2321235865592d2cb108000c215460432d2c01462346
6023466123201020468a61b8ff80628ab140408a704560683a2d2c208a23
49648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb901000002435258b2054008ba0180000901401bb901
800002435258b2054008b80200b109401bb2054008ba0100000901005959
59b9400000808855b94000020063b8040088555a58b30c000d011bb30c00
0d0159595942424242422d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2cb0022563b0
206066b00225b82000626023622d2c204569442d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
b12801885158b94000040063b8080088545c1bb001592d2cb12801885158
b94000040063b8080088545c1bb001592d000001000000063333a1099dfd
5f0f3cf50019080000000000bbeb7ccc00000000d5968a66fbfafd8009ec
083600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000004040e0000040e00ae040e
0072040e0067000000bf0189024403590000000100000004005900050000
000000020010002f00870000123602350000000000000001001200010000
00000006000e00004141414141452b43616c69627269b10903415302c802
c60038001f02c702c60038001f02dd003802da005502d9003802d7005502
d8003802d7005502d6003802d5005502d4003802d3005502d2003802d100
5502bf003802be005502bd003802bc0055000402db003402db005402db00
03003402db005402db006402db00a402db00d402db0005006b02d5000100
0b02d10001001402c2004402c2006402c2007402c2009402c2000500a402
be000100a402bc000100200284b40918014a20b80283b40918014a20b802
82b40918014a20b80281b40918014a20b80280b40918014a20b8027fb409
18014a20b8027eb40918014a20b8027db40918014a20b8027cb40918014a
20b8027bb40918014a20b8027ab40918014a20b80279b40918014a20b802
78b40918014a20b80277b40918014a20b80276b40918014a20b80275b409
18014a20b80274b40918014a20b80273b40918014a20b80271b40918014a
20b80270b40918014a20b8026fb40918014a20b8026eb40918014a20b802
6db40918014a20b8026cb40918014a20b8026bb40918014a20b8026ab409
18014a20b80269b40918014a20b80268b40918014a20b80267b40918014a
20b80266b40918014a20b80265b40918014a20b80264b40918014a20b802
63b40918014a20b80262b40918014a20b80261b40918014a20b80260b409
18014a20b8025fb40918014a20b8025eb40918014a20b8025db40918014a
20b8025cb40918014a20b8025bb40918014a20b8025ab40918014a20b802
59b40918014a20b80258b40918014a20b80257b40918014a20b80256b409
18014a20b80255b40918014a20b80254b40918014a20b80253b40918014a
20b80252b40918014a20b80251b40918014a20b80250b40918014a20b802
4fb40918014a20b8024eb40918014a20b8024db40918014a20b8024cb409
18014a20b8024bb40918014a20b8024ab40918014a20b80249b40918014a
20b80248b40918014a20b80247b40918014a20b80246b40918014a20b802
45b40918014a20b80244b40918014a20b80243b40918014a20b80242b409
18014a20b80241b40918014a20b80240b40918014a20b8023fb40918014a
20b8023eb40918014a20b8023db40918014a20b8023cb40918014a20b802
3bb40918014a20b8023ab40918014a20b80239b40918014a20b80238b409
18014a20b80237b40918014a20b80236b40918014a20b80235b40918014a
20b80234b40918014a20b80233b40918014a20b80232b40918014a20b802
31b40918014a20b80230b40918014a20b8022fb40918014a20b8022eb409
18014a20b8022db40918014a20b8022cb40918014a20b8022bb40918014a
20b8022ab40918014a20b80229b40918014a20b80228b40918014a20b802
27b40918014a20b80226b40918014a20b80225b40918014a20b80224b409
18014a20b80223b40918014a20b80222b40918014a20b80221b40918014a
20b80220b40918014a20b8021fb40918014a20b8021eb40918014a20b802
1db40918014a20b8021cb40918014a20b8021bb40918014a20b8021ab409
18014a20b80219b40918014a20b80218b40918014a20b80217b40918014a
20b80216b40918014a20b80215b40918014a20b80214b40918014a20b802
13b40918014a20b80212b40918014a20b80211b40918014a20b80210b409
18014a20b8020fb40918014a20b8020eb40918014a20b8020db40918014a
20b8020cb40918014a20b8020bb40918014a20b8020ab40918014a20b802
09b40918014a20b80208b40918014a20b80207b40918014a20b80206b409
18014a20b80205b40918014a20b80204b40918014a20b80203b40918014a
20b80202b40918014a20b80201b40918014a20b80200b40918014a20b801
ffb40918014a20b801feb40918014a20b801fdb40918014a20b801fcb409
18014a20b801fbb40918014a20b801fab40918014a20b801f9b40918014a
20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801
f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2b409
18014a20b801f1b40918014a20b801f0b40918014a20b801efb40918014a
20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801
ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8b409
18014a20b801e7b40918014a20b801e6b40918014a20b801e5b40918014a
20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801
e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801deb409
18014a20b801ddb40918014a20b801dcb40918014a20b801dbb40918014a
20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20b801
d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4b409
18014a20b801d3b40918014a20b801d2b40918014a20b801d1b40918014a
20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20b801
cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801cab409
18014a20b801c9b40918014a20b801c8b40918014a20b801c7b40918014a
20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20b801
c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0b409
18014a20b801bfb40918014a20b801beb40918014a20b801bdb40918014a
20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20b801
b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6b409
18014a20b801b5b40918014a20b801b4b40918014a20b801b3b40918014a
20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20b801
afb40918014a20b801aeb40918014a20b801adb40918014a20b801acb409
18014a20b801abb40918014a20b801aab40918014a20b801a9b40918014a
20b801a8b40918014a20b801a7b40918014a20b801a6b40918014a20b801
a5b40918014a20b801a4b40918014a20b801a3b40918014a20b801a2b409
18014a20b801a1b40918014a20b801a0b40918014a20b8019fb40918014a
20b8019eb40918014a20b8019db40918014a20b8019cb40918014a20b801
9bb40918014a20b8019ab40918014a20b80199b40918014a20b80198b409
18014a20b80197b40918014a20b80196b40918014a20b80195b40918014a
20b80194b40918014a20b80193b40918014a20b80192b40918014a20b801
91b40918014a20b80190b40918014a20b8018fb40918014a20b8018eb409
18014a20b8018db40918014a20b8018cb40918014a20b8018bb40918014a
20b8018ab40918014a20b80189b40918014a20b80188b40918014a20b801
87b40918014a20b80186b40918014a20b80185b40918014a20b80184b409
18014a20b80183b40918014a20b80182b40918014a20b80181b40918014a
20b80180b40918014a20b8017fb40918014a20b8017eb40918014a20b801
7db40918014a20b8017cb40918014a20b8017bb40918014a20b8017ab409
18014a20b80179b40918014a20b80178b40918014a20b80177b40918014a
20b80176b40918014a20b80175b40918014a20b80174b40918014a20b801
73b40918014a20b80172b40918014a20b80171b40918014a20b80170b409
18014a20b8016fb40918014a20b8016eb40918014a20b8016db40918014a
20b8016cb40918014a20b8016bb40918014a20b8016ab40918014a20b801
69b40918014a20b80168b40918014a20b80167b40918014a20b80166b409
18014a20b80165b40918014a20b80164b40918014a20b80163b40918014a
20b80162b40918014a20b80161b40918014a20b80160b40918014a20b801
5fb40918014a20b8015eb40918014a20b8015db40918014a20b8015cb409
18014a20b8015bb40918014a20b8015ab40918014a20b80159b40918014a
20b80158b40918014a20b80157b40918014a20b80156b40918014a20b801
55b40918014a20b80154b40918014a20b80153b40918014a20b80152b409
18014a20b80150b40918014a20b8014fb40918014a20b8014eb40918014a
20b8014cb40918014a20b8014bb40918014a20b8014ab40918014a20b801
49b40918014a20b80148b40918014a20b80147b40918014a20b80146b409
18014a20b80145b40918014a20b80144b40918014a20b80143b30918014a
b80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb802
80b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb2
1e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d43
1fb80277b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb8
0273b21d431fb80272b21d411fb80271b21d421fb80270b21d421fb8026f
b21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c
451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267b21c451f
b80266b21c441fb80265b21c451fb80264b21c451fb80263b21c451fb802
62b21c451fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb2
1c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c45
1fb80259b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb8
0255b21c451fb80254b21c451fb80253b21c451fb80252b21c451fb80251
b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c
451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491f
b80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb802
44b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b2
1b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b
1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb8
0237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233
b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b
4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1f
b8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb802
26b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b2
1b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c
1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb8
0219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215
b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a
4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1f
b8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb802
08b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b2
19511fb80203b219501fb80202b219511fb80201b219511fb80200b21951
1fb801ffb219511fb801feb219501fb801fdb219511fb801fcb219511fb8
01fbb219511fb801fab219501fb801f9b219511fb801f8b219511fb801f7
b219511fb801f6b219511fb801f5b218541fb801f4b218531fb801f3b218
541fb801f2b218541fb801f1b218541fb801f0b218531fb801efb218541f
b801eeb218541fb801edb218541fb801ecb218531fb801ebb218531fb801
eab218541fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b2
18531fb801e5b218541fb801e4b218531fb801e3b218541fb801e2b21854
1fb801e1b218541fb801e0b218531fb801dfb218531fb801deb218541fb8
01ddb218541fb801dcb218541fb801dbb218541fb801dab218531fb801d9
b218541fb801d8b218541fb801d7b217571fb801d6b217561fb801d5b217
561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1b217571f
b801d0b217561fb801cfb217561fb801ceb217571fb801cdb217571fb801
ccb217571fb801cbb217571fb801cab217561fb801c9b217561fb801c8b2
17571fb801c7b217571fb801c6b217571fb801c5b217571fb801c4b21757
1fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b217571fb8
01bfb217561fb801beb217561fb801bdb217571fb801bcb217571fb801bb
b217571fb801bab217571fb801b9b217571fb801b8b217561fb801b7b217
571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1f
b801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801
aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2
163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b
1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb8
01a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019d
b2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b216
5b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1f
b80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb801
90b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2
163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b
1fb80187b2165b1fb80186b215611fb80185b215621fb80184b215621fb8
0183b215661fb80182b215661fb80181b215551fb80180b215451fb8017f
b215361fb8017eb215361fb8017db215611fb8017cb215621fb8017bb215
621fb8017ab215641fb80179b215661fb80178b215661fb80177b215661f
b80176b215661fb80175b215661fb80174b215661fb80173b215451fb801
72b215621fb80171b215621fb80170b215631fb8016fb215641fb8016eb2
15661fb8016db215661fb8016cb215661fb8016bb215661fb8016ab21566
1fb80169b215621fb80168b215621fb80167b215611fb80166b215641fb8
0165b215641fb80164b215661fb80163b215661fb80162b215661fb80161
b215661fb80160b215661fb8015fb215661fb8015eb215551fb8015db215
451fb8015cb215451fb8015bb215361fb8015ab215611fb80159b215621f
b80158b215621fb80157b215631fb80156b215641fb80155b215661fb801
54b215661fb80153b215661fb80152b215661fb80151b214401fb80150b2
14551fb8014fb214561fb8014eb214831fb8014db2142d1fb8014cb21440
1fb8014bb214401fb8014ab214411fb80149b214401fb80148b214401fb8
0147b214411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143
b214801fb80142b212461fb80141b212461fb80140b212461fb8013fb212
461fb8013eb212441fb8013db212461fb8013cb211591fb8013bb211591f
b8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211581fb801
36b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b2
11471fb80131b211551fb80130b211571fb8012fb211571fb8012eb21158
1fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb8
0129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125
b211561fb80124b211561fb80123b211571fb80122b211581fb80121b211
591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1f
b8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb801
18b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2
105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f
1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8
010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107
b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b210
5f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f
631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641f
f60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f
641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641f
e70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e
681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681f
d80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d
2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1f
c90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d
311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c
731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731f
b30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b
7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1f
a40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b
7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f
950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a
671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255805581ab8055
7f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a
557bab7a557955775578ab7755ba028600660285403c5576ab7555047514
75747503f47501ab750144750130750102007510752075030c7455725573
ab7255007250728072b072043bb072e072020072010ab8ffc0b3721b1e46
b8ffc0407c720d104671556f5570ab6f556e666d556a03251f6938675568
ab67556638645565ab645563386255613860555f385d555eab5d555c385a
555bab5a55593858555703251f5638545555ab54555338515552ab51554f
384e554e03251f4d384b554cab4b554a38485549ab485547384655450338
1f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b
04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f
18cf18024018292c460f17cf17df17ef1704134017292e46001610162016
0315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc040
1f162326460f15010f151f150245ef150186000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb8080052
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e7375732b58403d0011e011f0110315bf10cf10020f0f010f0fff0f02
400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d1f
0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b02
400b3f4346400b2d30460003012001010001100120010308b8ffc0b30115
1f462b5e7375732b2b745e732b2b5e73742b73742b7374745e735901755e
73742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73
755e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb100024354
5841ff0284006402830064028200640281006402800064027f0064027e00
64027d0064027c0064027b0064027a006402790064027800640277006402
7600640275006402740064027300640271006402700064026f0064026e00
64026d0064026c0064026b0064026a006402690064026800640267006402
660064026500640264006402630064026200640261006402600064025f00
64025e0064025d0064025c0064025b0064025a0064025900640258006402
570064025600640255006402540064025300640252006402510064025000
64024f0064024e0064024d0064024c0064024b0064024a00640249006402
480064024700640246006402450064024400640243006402420064024100
6402400064023f0064023e0064023d0064023c0064023b0064023a006402
390064023800640237006402360064023500640234006402330064023200
640231006402300064022f0064022e0064022d0064022c0064022b006402
2a0064022900640228006402270064022600640225006402240064022300
64022200640221006402200064021f0064021e0064021d0064021c006402
1b0064021a00640219006402180064021700640216006402150064021400
6402130064021200640211006402100064020f0064020e0064020d006402
0c0064020b0064020a006402090064020800640207006402060064020500
64020441ff00640203006402020064020100640200006401ff006401fe00
6401fd006401fc006401fb006401fa006401f9006401f8006401f7006401
f6006401f5006401f4006401f3006401f2006401f1006401f0006401ef00
6401ee006401ed006401ec006401eb006401ea006401e9006401e8006401
e7006401e6006401e5006401e4006401e3006401e2006401e1006401e000
6401df006401de006401dd006401dc006401db006401da006401d9006401
d8006401d7006401d6006401d5006401d4006401d3006401d2006401d100
6401d0006401cf006401ce006401cd006401cc006401cb006401ca006401
c9006401c8006401c7006401c6006401c5006401c4006401c3006401c200
6401c1006401c0006401bf006401be006401bd006401bc006401bb006401
ba006401b9006401b8006401b7006401b6006401b5006401b4006401b300
6401b2006401b1006401b0006401af006401ae006401ad006401ac006401
ab006401aa006401a9006401a8006401a7006401a6006401a5006401a400
6401a3006401a2006401a1006401a00064019f0064019e0064019d006401
9c0064019b0064019a006401990064019800640197006401960064019500
640194006401930064019200640191006401900064018f0064018e006401
8d0064018c0064018b0064018a0064018900640188006401870064018600
640185006441800184006401830064018200640181006401800064017f00
64017e0064017d0064017c0064017b0064017a0064017900640178006401
770064017600640175006401740064017300640172006401710064017000
64016f0064016e0064016d0064016c0064016b0064016a00640169006401
680064016700640166006401650064016400640163006401620064016100
6401600064015f0064015e0064015d0064015c0064015b0064015a006401
590064015800640157006401560064015500640154006401530064015200
6401500064014f0064014e0064014c0064014b0064014a00640149006401
48006401470064014600640145006401440064014300642b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b00737373737373742b2b2b2b2b2b2b2b2b2b185f5e0000>
[1715 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 382 1 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>LAAAAA+Calibri AddT42Char 
1 786 2 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>LAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>LAAAAA+Calibri AddT42Char 
LAAAAA+Calibri /CharStrings get begin
/g1 1 def
/g2 2 def
end
LAAAAA+Calibri /Encoding get
dup 33 /g1 put
dup 34 /g2 put
pop
end
%ADOEndSubsetFont
/HSXFSY+Calibri /LAAAAA+Calibri findfont ct_VMDictPut/HSXFSY+Calibri*1 [33{/.notdef}rp /g1 /g2 221{/.notdef}rp]HSXFSY+Calibri nfHSXFSY+Calibri*1 [6 0 0 -6 0 0 ]msf118.506 54.8614 mo(!)shHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf323.25 62.5414 mo(!"#$)[8.19995 2.39999 5.09995 0 ]xshHSXFSY+Calibri*1 [6 0 0 -6 0 0 ]msf343.65 63.5013 mo(")shHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf319.491 109.101 mo(%&)[3.20007 0 ]xsh413.557 3.87106 mo
436.597 3.87106 li
436.597 26.9111 li
413.557 26.9111 li
cp
f
.8 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
413.557 3.87106 mo
436.597 3.87106 li
436.597 26.9111 li
413.557 26.9111 li
cp
@
436.597 3.55966 mo
459.637 3.55966 li
459.637 26.5997 li
436.597 26.5997 li
cp
@
459.637 3.87106 mo
482.677 3.87106 li
482.677 26.9111 li
459.637 26.9111 li
cp
f
459.637 3.87106 mo
482.677 3.87106 li
482.677 26.9111 li
459.637 26.9111 li
cp
@
482.677 3.55966 mo
505.717 3.55966 li
505.717 26.5997 li
482.677 26.5997 li
cp
@
505.509 3.81906 mo
528.549 3.81906 li
528.549 26.8591 li
505.509 26.8591 li
cp
@
528.549 4.07877 mo
551.589 4.07877 li
551.589 27.1188 li
528.549 27.1188 li
cp
@
551.382 4.33807 mo
574.422 4.33807 li
574.422 27.3781 li
551.382 27.3781 li
cp
@
574.632 4.07877 mo
597.672 4.07877 li
597.672 27.1188 li
574.632 27.1188 li
cp
f
574.632 4.07877 mo
597.672 4.07877 li
597.672 27.1188 li
574.632 27.1188 li
cp
@
grestore
17.1129 76.7854 mo
99.8805 76.7854 li
99.8805 60.1692 li
17.1129 60.1692 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 152.444 213.421 ]ct
[82.7676 0 0 16.6162 -135.331 136.636 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 264 
/H 53 
/M[264 0 0 -53 0 53 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 264 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 264 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 264 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 264 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&i;fUeY.s#to"Xb1joDKbUoi\Xr2o1bjoDijR]GZQquGcXjoE3ZOQQ-7nc7_4joFGVkQ(P]
ikORT!5IUq!5IRpr4gChjoFGDnc87]iiV;B!3P>_!3PJcquF^<joFGBquGs]iiD/@!3>2]!3>\knc6Y0
joFW-r9!&?io]>&!9WAC!9X4[kQ&TajoFteo"X5cikORT!5Ie!qu?`3j8]1pjT+;TjoG=]kcNnGiiV;B
!3Pknnc/Zlj8]1^jT+;BlN$h_j/_5@iiD/@!3?)!kPtU`j8]1\jT+;@o`4O_j6#D&io]P,qZ$WYjT#;C
j8]2BjT+<&rrD6_j1jXTikP-dnGiR(jT#:qj8]1pjT+S\q7lJ#o`4$Sj8e2AkQ(S^!3P>_!3P;^!3P>_
iiW+YlN#tGj8e2?nc8:^!3>2]!3>/\!3>2]kH"N]joFH(j8e3%quH!^!9WAC!9W>B!9WACn`KE)joFGV
j8eAXr4h=n!5IUq!5IRp!5IUqqnM@0joFGDj8e_Pnu_!R!3P>_!3P;^!3PJcr;biZjoFGBj8f(Xkc<eF
!3>2]!3>/\!3>\ko)RdNjoFH(kQ(P]io]>&!9WAC!9W>B!9X4[klB`*joFGVnc87]ikORT!5IUq!5Iau
qu?`3jT+;TjoFGDquGs]iiV;B!3P>_!3Phmnc/ZljT+;BjoFVGr2\lYiiD/@!3>2]!3?%ukPtU`jT+;@
joFu7o&f!5io]>&!9WPHqu?`Zj8]2BjT+<&joG=okeH0YikORT!5J.+nc/[)j8]1pjT+;TlN$h_j/qAB
iiV;B!3Q5#kPtUbj8]1^jT+;Bo`4O_j/_5@iiDAFqZ$VsjT#:]j8]1\jT+;@rrD6_j6#D&io]n6nGiRO
jT#;Cj8]2BjT+T.q<%5Jo`4$ej8e2SkQ(S^!5IUq!5IRp!5IUqikPBklN#tIj8e2Anc8:^!3P>_!3P;^
!3P>_kH4ZajoFGBj8e2?quH!^!3>2]!3>/\!3>2]nZ25]joFH(j8eB*r9!)@!9WAC!9W>B!9WACqr[,)
joFGVj8e_bo"X8d!5IUq!5IRp!5Iaur;biljoFGDj8f(ZkcNqH!3P>_!3P;^!3Phmo)RdPjoFGBkQ(P]
iiD/@!3>2]!3>/\!3?%uklB_DjoFH(nc87]io]>&!9WAC!9WMGqu?`ZjT+<&joFGVquGs]ikORT!5IUq
!5J+*nc/[)jT+;TjoFVIr2o#[iiV;B!3P>_!3Q2"kPtUbjT+;BjoFtQnuLgOiiD/@!3>Abqu?_tj8]1\
jT+;@joG>AkiUq+io]>&!9WnRnc/[Pj8]2BjT+<&lN$h_j1jXTikORT!5JL5kPtUtj8]1pjT+;To`4O_
j/qABiiVMHqZ$VujT#:_j8]1^jT+;BrrD6_j/_5@iiD_PnGiQijT#:]j8]1\jT+SHq5a&do`4%7j8e3%
kQ(S^!9WAC!9W>B!9WACio^.=lN#t[j8e2Snc8:^!5IUq!5IRp!5IUqkJ-r0joFGDj8e2AquH!^!3P>_
!3P;^!3P>_nZDAajoFGBj8eADr2\oZ!3>2]!3>/\!3>2]qlAq]joFH(j8e`4o&f$6!9WAC!9W>B!9WMG
r;bj>joFGVj8f(lkeH3Z!5IUq!5IRp!5J+*o)RdbjoFGDkQ(P]iiV;B!3P>_!3P;^!3Q2"klB_FjoFGB
nc87]iiD/@!3>2]!3>>aqu?_tjT+;@joFH(quGs]io]>&!9WAC!9WkQnc/[PjT+<&joFV[r4h:mikORT
!5IUq!5JI4kPtUtjT+;TjoFtSnu^sQiiV;B!3PMdqu?`!j8]1^jT+;BjoG=[kc<bEiiD/@!3>_lnc/Zj
j8]1\jT+;@lN$h_j6#D&io]>&!9X7\kPtVFj8]2BjT+<&o`4O_j1jXTikOdZqZ$W2jT#:qj8]1pjT+;T
rrD6_j/qABiiVkRnGiQkjT#:_j8]1^jT+SJq5s2fo`4$Qj8e2?kQ(S^!3>2]!3>/\!3>2]iiDtWlN#u-
j8e3%nc8:^!9WAC!9W>B!9WACkN;^)joFGVj8e2SquH!^!5IUq!5IRp!5IUqn\=Y0joFGDj8eAFr2o&\
!3P>_!3P;^!3P>_qlT(ajoFGBj8e_NnuLjP!3>2]!3>/\!3>>ar;biXjoFH(j8f)>kiUt,!9WAC!9W>B
!9WkQo)Re4joFGVkQ(P]ikORT!5IUq!5IRp!5JI4klB_XjoFGDnc87]iiV;B!3P>_!3PJcqu?`!jT+;B
joFGBquGs]iiD/@!3>2]!3>\knc/ZjjT+;@joFW-r9!&?io]>&!9WAC!9X4[kPtVFjT+<&joFteo"X5c
ikORT!5Ie!qu?`3j8]1pjT+;TjoG=]kcNnGiiV;B!3Pknnc/Zlj8]1^jT+;BlN$h_j/_5@iiD/@!3?)!
kPtU`j8]1\jT+;@o`4O_j6#D&io]P,qZ$WYjT#;Cj8]2BjT+<&rrD6_j1jXTikP-dnGiR(jT#:qj8]1p
jT+S\q7lJ#o`4$Sj8e2AkQ(S^!3P>_!3P;^!3P>_iiW+YlN#tGj8e2?nc8:^!3>2]!3>/\!3>2]kH"N]
joFH(j8e3%quH!^!9WAC!9W>B!9WACn`KE)joFGVj8eAXr4h=n!5IUq!5IRp!5IUqqnM@0joFGDj8e_P
nu_!R!3P>_!3P;^!3PJcr;biZjoFGBj8f(Xkc<eF!3>2]!3>/\!3>\ko)RdNjoFH(kQ(P]io]>&!9WAC
!9W>B!9X4[klB`*joFGVnc87]ikORT!5IUq!5Iauqu?`3jT+;TjoFGDquGs]iiV;B!3P>_!3Phmnc/Zl
jT+;BjoFVGr2\lYiiD/@!3>2]!3?%ukPtU`jT+;@joFu7o&f!5io]>&!9WPHqu?`Zj8]2BjT+<&joG=o
keH0YikORT!5J.+nc/[)j8]1pjT+;TlN$h_j/qABiiV;B!3Q5#kPtUbj8]1^jT+;Bo`4O_j/_5@iiDAF
qZ$VsjT#:]j8]1\jT+;@rrD6_j6#D&io]n6nGiROjT#;Cj8]2BjT+T.q<%5Jo`4$ej8e2SkQ(S^!5IUq
!5IRp!5IUqikPBklN#tIj8e2Anc8:^!3P>_!3P;^!3P>_kH4ZajoFGBj8e2?quH!^!3>2]!3>/\!3>2]
nZ25]joFH(j8eB*r9!)@!9WAC!9W>B!9WACqr[,)joFGVj8e_bo"X8d!5IUq!5IRp!5Iaur;biljoFGD
j8f(ZkcNqH!3P>_!3P;^!3Phmo)RdPjoFGBkQ(P]iiD/@!3>2]!3>/\!3?%uklB_DjoFH(nc87]io]>&
!9WAC!9WMGqu?`ZjT+<&joFGVquGs]ikORT!5IUq!5J+*nc/[)jT+;TjoFVIr2o#[iiV;B!3P>_!3Q2"
kPtUbjT+;BjoFtQnuLgOiiD/@!3>Abqu?_tj8]1\jT+;@joG>AkiUq+io]>&!9WnRnc/[Pj8]2BjT+<&
lN$h_j1jXTikORT!5JL5kPtUtj8]1pjT+;To`4O_j/qABiiVMHqZ$VujT#:_j8]1^jT+;BrrD6_j/_5@
iiD_PnGiQijT#:]j8]1\jT+SHq5a&do`4%7j8e3%kQ(S^!9WAC!9W>B!9WACio^.=lN#t[j8e2Snc8:^
!5IUq!5IRp!5IUqkJ-r0joFGDj8e2AquH!^!3P>_!3P;^!3P>_nZDAajoFGBj8eADr2\oZ!3>2]!3>/\
!3>2]qlAq]joFH(j8e`4o&f$6!9WAC!9W>B!9WMGr;bj>joFGVj8f(lkeH3Z!5IUq!5IRp!5J+*o)Rdb
joFGDkQ(P]iiV;B!3P>_!3P;^!3Q2"klB_FjoFGBnc87]iiD/@!3>2]!3>>aqu?_tjT+;@joFH(quGs]
io]>&!9WAC!9WkQnc/[PjT+<&joFV[r4h:mikORT!5IUq!5JI4kPtUtjT+;TjoFtSnu^sQiiV;B!3PMd
qu?`!j8]1^jT+;BjoG=[kc<bEiiD/@!3>_lnc/Zjj8]1\jT+;@lN$h_j6#D&io]>&!9X7\kPtVFj8]2B
jT+<&o`4O_Oh^b-jT#:qj8]1pjT+;TrrD6_S#u1^jT#:_j8]1^jT+SJq5s2fo`1#QrN##[!3>/\!3>2]
iiDtWlN!=7oB,-7!9W>B!9WACkN;^)joFGVj8e2SquH!^RD8=-joFGDj8eAFr2o&\UTNa^joFGBj8e_N
nuLjPXfL<ZjoFH(j8f)>kiUt,\)u3&Y5j.SJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP'9
JcLB&JcLB&m/VY~>

%%EndBinary
grestore
np
gsave
-140.444 382.941 mo
627.556 382.941 li
627.556 -49.0585 li
-140.444 -49.0585 li
-140.444 382.941 li
clp
.749722 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSX+Calibri gcheck setglobal} if
1 1240 5 <00010047ffed0363052100490128b0852b58b90041ffe8b40f10014c41b8
fff0b30d014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d
41b8022c402b32401314014c324011014d243224320c1b180f10014c1b10
0d014d1b1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d
00b8ffc0b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb01
270037000a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c37
113711163cb8010cb5411b05295316b80129b10556003fed3f123939ed11
39392f2f2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b
2be12b2b2b2b2b31301bb1372eb80127b26c110ab80126b76c3711371116
293cb8010cb76c411b0529530516b80129b26c055600183f2b3f1239392b
1139392f2f2b2b30315901140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e060363
4377a15d416f573b170b04080c080e3350714a385d43243252696e685233
3b6991542b574d3c1306040203060b070b2f445d3a3650341a32536a6e6a
5333016b5b8e633216202218251f161d12072228231e375033374e3b3133
3e54714f517f562d0f191f130b111813121c13091c231d1d304225364e3c
32333d537100>HSXFSX+Calibri AddT42Char 
1 2728 9 <0002005dffed039903ca002b003400eab0852b58402a2f363f366f360313
200d014d13200f014d1313212c100c014d2c180b014d2c100d014d2c100f
10014c2cb801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d01
4d04b8ffeeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a
4021212cc78004900402c00401d0040104041c2fdc264a18ea600e700e02
0e09ea1c4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b
5de12b2b2b2b12392f2b2b31305d1b4022042cc76c76040104041c262fdc
6c264a0e18ea6c000e100e020f030e1c09ea6c1c4d00183f2bc45f5e5d2b
3f2b12392f5d2b3031590114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>HSXFSX+Calibri AddT42Char 
1 3410 11 <00010099fffa03a003ca003200b8b0852b58400f12100b014d13100b014d
3f34012a13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8
fff6b30c014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d01
4d0b100f014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b8
0106400a2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b
2b2b10e12b2b2b2b2b3931305d002b2b1bb12d10b80106400b6c2d4a2a19
2449194c054c00183f3f3f12393f2b30315925140e0223222e023511342e
022322060711140e0223222e023511343e0233321e021515363633321e02
1503a00812201819201208182e49303e7c44081220191820130706121c17
161d10074c974d5a7b4c2119080b080404080b08020f4d5e44245855fd8b
080b080404080b080384080b090303090b0877554f3d66896000>HSXFSX+Calibri AddT42Char 
1 4680 15 <00010051ffed02ce03ca00490110b0852b58400c2f4b3f4b4f4b7f4baf4b
0541b8fff0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b3
13014d41b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c
1b100d014d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f600
00ffc0400a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2e
dd370aeb115011601170110337113711163cdb411b05294a16e8054d003f
ed3f123939ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b12
39392f2fe12b2b2b2b2b2b31305d1b4025372edd6c110aeb6c0011101120
11030e033711371116293cdb6c411b05294a0516e86c054d00183f2b3f12
39392b1139392f2f5f5e5d2b2b30315901140e0223222e0435343e023332
1e0233323e0235342e0635343e0233321e0615140e0223222e0223220e02
15141e0602ce335e824e30574530160a04060b070b2b3f56382a44321b27
40505551402729527b5224483a291507030303070a06092236492f2a4029
1528405255534027010e456c4a260f171914241f131a10071b201b122336
252634281f222b3e563c3561492c0c1215100c0f16101119100716191613
23301c27352820222a3c5400>HSXFSX+Calibri AddT42Char 
1 4404 14 <00010099fffa02a703ca00330086b0852b58b4703501260fb8fff6b30c01
4d0fb8ffe8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f8
4012004013014d004011014d00200d014d001a0ab8012540092b4a260f15
2049154c003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d1bb12b
0ab80125400a6c2b4a260f152049154c00183f3f1239393f2b3031590114
0e0223222e0223220e020711140e0223222e023511343e0233321e021515
3e0333321e0602a70206090808171d24151930353a230812201918201307
06121c17161d100725413a391d0d21241d0c0403010362161e1109090908
142e4c37fdb0080b080404080b080384080b090303090b08833644270f03
080a0a090e1b>HSXFSX+Calibri AddT42Char 

1 0 1 <> HSXFSX+Calibri AddT42Char 
1 2378 8 <00020060ffed039c056d0026003900bcb0852b58401f3f3b010b1b39100d
014d390a0c014d391010014d39100f014d39180b014d39bb01f90000002f
ffe0b30d014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d
2fb8ffe8b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a
34b80104b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b
2b2b2b2b323931305d1b400a21460b39271b040e182ab80105b46c184a0e
34b80104b46c0e4d054c00183f3f2b3f2b1217393f30315925140e022322
2e023535060623222e0235343e023332161711343e0233321e0215032626
23220e0215141e0233323e0237039c07111c14151c120847995b638c5728
3262915f4f834007141f1819201209a6437d443f58371915345641213d40
462719080c070404070c08774d564d83b16274bb84474543020b070d0705
05070d07fd4553573c627c404482653d122a4331>HSXFSX+Calibri AddT42Char 
1 1958 7 <0002005cffed033f03ca0033004000f6b0852b5840200f421f422f42030b
0917340c0c014d34100d014d34180b014d34100f10014c34b801f7400e00
27270f00010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8
ffe8b30b014d3ab8ffe8b40f10014c3ab8020840141117c500341034023b
c0340100340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d
04002f3fed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b
5e5d392f10e12b2b2b2b323931305e5d1b400d0b17013417c56c34342e41
222ab8011b40166c00220116042222042e1dea6c2e4a0c3ddc6c0c4d0400
182f3f2b3f2b12392f5f5e5d2b1112392f2b5d3031592514060623222626
3535060623222e0235343e02333335342e0223220e0223222e0235343e04
33321e02150723220e0215141633323637033f101c1b1a1f0e3b91514773
512d3e74a8697c16314e393d6149310c080c0904071b4256663461885426
a48d4464421f5950416f3d180c0c06060c0c5a3f46254666414c704a2546
3450351b1d231d0810190f191d1a231d132c557e54c4172d3f2946534244
>HSXFSX+Calibri AddT42Char 
1 4054 13 <00020099fe9403d503ca002a003d00b1b0852b58b53f3f0121360ab8fff0
b30d014d0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0a
b801f84017152b200d014d2b120c014d2b180f10014c2b180b014d2bb802
0a400900150a363521040530b80105b6264a1b49104f39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d1bb7
0a36352104052630b8010540096c264a1b49104f0539b80105b26c054d00
183f2b3f3f3f2b12173930315901140e0223222e022711140e0223222e02
3511343e0233321e0215153e0333321e0207342e0223220e020711161633
323e0203d53363925e2844414024081220191820130706121c14151b1207
294c4d512d628a5728ae15335640203e404627447a433e59371a01e976bc
834710223423fe3e080c080404080c0804e9090b080303080b09792a3e29
154c84af754581643c13294331fe9a53583c647c>HSXFSX+Calibri AddT42Char 
HSXFSX+Calibri /CharStrings get begin
/g5 5 def
/g9 9 def
/g11 11 def
/g15 15 def
/g14 14 def
/g1 1 def
/g8 8 def
/g7 7 def
/g13 13 def
end
HSXFSX+Calibri /Encoding get
dup 39 /g5 put
dup 40 /g9 put
dup 41 /g11 put
dup 42 /g15 put
dup 43 /g14 put
dup 44 /g1 put
dup 45 /g8 put
dup 46 /g7 put
dup 47 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 /g5 /g9 /g11 /g15 /g14 /g1 /g8 /g7 /g13 208{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf2.90454 57.5013 mo('\(\)*#+,-.%.,/.%%\(+\))[4.4 4.80001 4.99994 3.80007 5.09993 3.29999 2.19998 4.99994 4.51004 3.08007 4.60004 2.19998 4.99994 4.51004 3.06007 3.10006 4.80001 3.29999 0 ]xsh.8 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
401.827 268.467 mo
424.867 268.467 li
424.867 291.507 li
401.827 291.507 li
cp
@
424.867 268.155 mo
447.907 268.155 li
447.907 291.195 li
424.867 291.195 li
cp
@
447.907 268.467 mo
470.947 268.467 li
470.947 291.507 li
447.907 291.507 li
cp
@
470.947 268.155 mo
493.987 268.155 li
493.987 291.195 li
470.947 291.195 li
cp
@
493.779 268.415 mo
516.819 268.415 li
516.819 291.455 li
493.779 291.455 li
cp
f
493.779 268.415 mo
516.819 268.415 li
516.819 291.455 li
493.779 291.455 li
cp
@
516.819 268.674 mo
539.859 268.674 li
539.859 291.714 li
516.819 291.714 li
cp
f
516.819 268.674 mo
539.859 268.674 li
539.859 291.714 li
516.819 291.714 li
cp
@
539.651 268.934 mo
562.691 268.934 li
562.691 291.974 li
539.651 291.974 li
cp
@
562.902 268.674 mo
585.942 268.674 li
585.942 291.714 li
562.902 291.714 li
cp
f
562.902 268.674 mo
585.942 268.674 li
585.942 291.714 li
562.902 291.714 li
cp
@
470.947 329.026 mo
493.987 329.026 li
493.987 352.066 li
470.947 352.066 li
cp
@
493.779 329.285 mo
516.819 329.285 li
516.819 352.325 li
493.779 352.325 li
cp
f
493.779 329.285 mo
516.819 329.285 li
516.819 352.325 li
493.779 352.325 li
cp
@
516.819 329.545 mo
539.859 329.545 li
539.859 352.585 li
516.819 352.585 li
cp
@
539.651 329.804 mo
562.691 329.804 li
562.691 352.844 li
539.651 352.844 li
cp
@
562.902 329.545 mo
585.942 329.545 li
585.942 352.585 li
562.902 352.585 li
cp
0 0 0 0 cmyk
f
562.902 329.545 mo
585.942 329.545 li
585.942 352.585 li
562.902 352.585 li
cp
.749722 .679194 .670497 .901457 cmyk
@
401.824 329.026 mo
424.864 329.026 li
424.864 352.066 li
401.824 352.066 li
cp
@
447.696 329.545 mo
470.736 329.545 li
470.736 352.585 li
447.696 352.585 li
cp
@
425.074 329.026 mo
448.114 329.026 li
448.114 352.066 li
425.074 352.066 li
cp
f
425.074 329.026 mo
448.114 329.026 li
448.114 352.066 li
425.074 352.066 li
cp
@
grestore
284.587 55.4783 mo
363.57 55.4783 li
363.57 37.9266 li
284.587 37.9266 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 152.444 213.421 ]ct
[78.9826 0 0 17.5517 132.143 157.943 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 261 
/H 58 
/M[261 0 0 -58 0 58 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QiM^<
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcM/<JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QiM^<JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcM\KgqSHUo=s>dj1jgYj/mp8m&f=Kj/qPG
lDoN;jf@GBj/_DEn`GGchWEl!j6$%8oDem+jT#:qj8]1pjT#:qkQ(P]MSK)im/R-gjT#:_j8]1^jT#:_
mf<%]NNN2^kl:^ajT#:]j8]1\jT#:]p&OO]PcOPZkl:_GjT#;Cj8]2BjT#;Cr;c$]S*'5&kl:^ujT#:q
j8]1pk5YP`!5IRp`P:L7qS2:0kl:^cjT#:_j8]1^mK!"^!3P;^`NA5%iiVGF!3>2]!3>/\!3>bmnGiQi
j8d0"li?k^iiD;D!9WAC!9W>B!9X1Zl2UhHj8d0]o)S@^io]J*!5IUq!5IUq!<Bmr!!'dp!6)_L!:0^F
^Zb^uXlTN_Xm?&`!!'._!!'.^!6))%!91-F!!'(]!!'(k!:g*iX5s<]X5j9)X88mY!91'D!!)0C!!)0X
!:'Ubk2cRCk2ZNkk4@`s!93/*!!'dq!!'dp!!'dq!!'dp!8>3S^Z>IT^Zb^uXm5ua!!'.^!!'._!!'.^
!9('AXlTQBXm#fcX7?8_!!'(\!!'(]!!'(\!9gK?X5s?@X7cPc!!)0C!!)0B!!)0C!!)0F!;uo:k2cU&
k5>;I!!'dq!!'dp!!'dq!!'e&!;6E3^Z>IW^])"4!!'._!!'.^!!'._!!'.p!:Kp,XlTQLXnSs^!!'(]
!!'(\!!'(]!!'(u!9aF%X5s?QX731S!!)0C!!)0B!!)0E!!3-#k2ZN]k2cU>k3;$m!!'dq!!'dp!!'e%
!;HNo^Z5C6^Z>IT^Zb^uXlTN_XlKH^Xn;\a!!'.^!6)),!;Z]TXm#fcX5s<]X5j6\X8Dt_!!'(\!6)#1
!:p3MX6BTak2cRCk2cRD!9WAC!9W>B`TI!sli?&-kl:^ujT#:qli?h]!5IUq!5IRp`P:L7ikO^X!3P>_
!3Phmnc/ZljT#:_j8dE+qQ8iZiiVGF!3>2]!3>qrlMppcjT#:]j8dZ0o;gsQiiD;D!9WAC!9W>B!9WAC
!9W>Bg?.bajT+<&kl:^ulN$e^!5IRp!5IUq!5IRpiP4KhjT+;Tkl:^cnc8:^!3P;^!3P>_!3P;^kcN^D
jT+;Bp&O^b!3>2]!3>/\!3>2]!3>;`r;ag;jT+;@r;c3b!9WAC!9W>B!9WAC!9W_Mp&N(ojT+E)roWGF
!5IUq!5IRp!5IUq!5J4-mf:>AjT+Y^pV5qm!3P>_!3P;^!3P>_!3Q2"kQ&T(jT+nSn?(pT!3>2]!3>/\
!3>8_!WW5$j8d0"jT,.Xl)X%K!9WAC!9W>B!9W\Lp](<Vj8d0]jT+<&kl:^ujT#:qj8]1po`4L^!5IRp
`P:a>q>fNikl:^cjT#:_j8]1^quH!^!3P;^`NA_3o)RdPkl:^ajT#:]jT#;]X5s<]X5j9"X82h_!91'D
!!)0C!!)0J!;QTpk2cRCk2ZN]k2cU&k32jG^Z>Fq^[hHr!!'dq!!'dp!6i4S^Z>IT^Zb^uXlTN_Xni%`
!!'._!!'.^!7S(AXlTQBXm#fcX5s<]X5j6\X5s<]X5j97X6cnK!91'D!!)0I!;c`rk2ZLBk2cRCk2ZO$
k2kae!93/*!!'e)!;$6k^Z5@p^Z>Fq^Z5CY^YZ`e!91ce!;$6kXlTN_XlKH^XlTN_Xloc`!6))%!91-Z
!:9adX5s<]X5j6\X5s<]X7$&^!6)##!9L9\X6BTak2cRCk2ZLBk2cRCk4SfD!6+*^!:8kBk32jG^Z>Fq
^Z5@p^Z>Fq^\n/r!6)_7!;!tp^Zb^uXlTN_XlKH^XlfZc!!'.^!6))%!;`h^Xm#fcX5s<]X5j6\X6ou_
!!'(\!6)##!91'D!!)0C!!)0B!!)0S!:^$hk2ZN]k3N*E!93/*!!'dq!!'dp!!'e3!9sOa^Z5C6^[hHs
!91cX!!'._!!'._!!*)%jT#:_j8d0$q>fj^iiVGF!3>2]!3>Gdq#CDqjT#:]j8d0"jT+;@kl:_GjT#;C
o)S=]!9WAC!9W>Bbi\cajT+<&kl:^ujT#:qq>fg]!5IUq!5IRpe%bLhjT+;Tkl:^cjT#:_j8]1^jT#:_
j8do9m&f@LiiVGF!3>DcqZ$Vsj8]1\jT#:]j8e/>jf@JCiiD;D!9WhPoDemRj8]2BjT#;Cj8eE+hWEo"
io]q7oDem+jT#:qj8]1pjT#:qkQ(P]`P:L7ikPElm/R-gjT#:_j8]1^jT#:_mf<%]`NA5%jfSNakl:^a
jT#:]j8]1\jT#:]p&OO]`N/)#m&Tl]kl:_GjT#;Cj8]2BjT#;Cr;c$]`TH7^oB,Q)kl:^ujT#:qj8]1p
k5YP`!5IRp`P:L7qS2:0kl:^cjT#:_j8]1^mK!"^!3P;^`NA5%iiVGF!3>2]!3>/\!3>bmnGiQij8d0"
li?k^iiD;D!9WAC!9W>B!9X1Zl2UhHj8d0]o)S@^io]J*!5IUq!5IUq!<Bmr!!'dp!6)_L!:0^F^Zb^u
XlTN_Xm?&`!!'._!!'.^!6))%!91-F!!'(]!!'(k!:g*iX5s<]X5j9)X88mY!91'D!!)0C!!)0X!:'Ub
k2cRCk2ZNkk4@`s!93/*!!'dq!!'dp!!'dq!!'dp!8>3S^Z>IT^Zb^uXm5ua!!'.^!!'._!!'.^!9('A
XlTQBXm#fcX7?8_!!'(\!!'(]!!'(\!9gK?X5s?@X7cPc!!)0C!!)0B!!)0C!!)0F!;uo:k2cU&k5>;I
!!'dq!!'dp!!'dq!!'e&!;6E3^Z>IW^])"4!!'._!!'.^!!'._!!'.p!:Kp,XlTQLXnSs^!!'(]!!'(\
!!'(]!!'(u!9aF%X5s?QX731S!!)0C!!)0B!!)0E!!3-#k2ZN]k2cU>k3;$m!!'dq!!'dp!!'e%!;HNo
^Z5C6^Z>IT^Zb^uXlTN_XlKH^Xn;\a!!'.^!6)),!;Z]TXm#fcX5s<]X5j6\X8Dt_!!'(\!6)#1!:p3M
X6BTak2cRCk2cRD!9WAC!9W>B`TI!sli?&-kl:^ujT#:qli?h]!5IUq!5IRp`P:L7ikO^X!3P>_!3Phm
nc/ZljT#:_j8dE+qQ8iZiiVGF!3>2]!3>qrlMppcjT#:]j8dZ0o;gsQiiD;D!9WAC!9W>B!9WAC!9W>B
g?.bajT+<&kl:^ulN$e^!5IRp!5IUq!5IRpiP4KhjT+;Tkl:^cnc8:^!3P;^!3P>_!3P;^kcN^DjT+;B
p&O^b!3>2]!3>/\!3>2]!3>;`r;ag;jT+;@r;c3b!9WAC!9W>B!9WAC!9W_Mp&N(ojT+E)roWGF!5IUq
!5IRp!5IUq!5J4-mf:>AjT+Y^pV5qm!3P>_!3P;^!3P>_!3Q2"kQ&T(jT+nSn?(pT!3>2]!3>/\!3>8_
!WW5$j8d0"jT,.Xl)X%K!9WAC!9W>B!9W\Lp](<Vj8d0]jT+<&kl:^ujT#:qj8]1po`4L^!5IRp`P:a>
q>fNikl:^cjT#:_j8]1^quH!^!3P;^`NA_3o)RdPkl:^ajT#:]jT#;]X5s<]X5j9"X82h_!91'D!!)0C
!!)0J!;QTpk2cRCk2ZN]k2cU&k32jG^Z>Fq^[hHr!!'dq!!'dp!6i4S^Z>IT^Zb^uXlTN_Xni%`!!'._
!!'.^!7S(AXlTQBXm#fcX5s<]X5j6\X5s<]X5j97X6cnK!91'D!!)0I!;c`rk2ZLBk2cRCk2ZO$k2kae
!93/*!!'e)!;$6k^Z5@p^Z>Fq^Z5CY^YZ`e!91ce!;$6kXlTN_XlKH^XlTN_Xloc`!6))%!91-Z!:9ad
X5s<]X5j6\X5s<]X7$&^!6)##!9L9\X6BTak2cRCk2ZLBk2cRCk4SfD!6+*^!:8kBk32jG^Z>Fq^Z5@p
^Z>Fq^\n/r!6)_7!;!tp^Zb^uXlTN_XlKH^XlfZc!!'.^!6))%!;`h^Xm#fcX5s<]X5j6\X6ou_!!'(\
!6)##!91'D!!)0C!!)0B!!)0S!:^$hk2ZN]k3N*E!93/*!!'dq!91ck!9sQ^^[hHs!91cX!!'._!9C9^
XlTP\Xni%a!91-F!!'(]!:-]\X5s>ZX5s?@X6BTak2cU6k4.Tq!3YJ\k2cU&k32m+^\Rrr!9:i7!:[b5
^ZbaYXlKKBXiCG9Xg,"m!:$W]X5j9@X2b5>X/`5b!:f4Ck2ZO&k0!c'!2nuQ!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!13b<!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3<!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!13b<!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3t!.Y~>

%%EndBinary
grestore
np
163.431 210.745 mo
244.999 210.745 li
244.999 193.557 li
163.431 193.557 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 152.444 213.421 ]ct
[81.5676 0 0 17.1885 10.9873 2.67605 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 261 
/H 55 
/M[261 0 0 -55 0 55 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 261 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QiM^<
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcM/<JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QiM^<JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcMeNftW-Rp:oYgj1jgYi2qU5n#bXNj/qPG
kGs38kc<bEj/_DEmcK,`iTB2$j6#q5pAb3.jT+;TjT#:qjT#8\j1jXTikORT!5J@1n,NHjjT+;BjT#:_
li?h]j/qABiiV;B!3PJc!3>2]iiD/@!3>\knc7^Nj8e2?lN$e^!3>>a!9WACio]>&!9X+XlN#u-j8e3%
nc8:^!9WMG!5IUqikORT!5IRpj1jXT!5IUqs1e@0m/R.$kl:^cjT+;BlN$e^!3P;^j/qAB!3P>_!j/R)
jo>C`kl:^ajT+;@nc8:^!3>/\j/_5@!3>>ar;ckujT#:]kl:_GjT+<&q#Kd^!9W>Bj6#D&!9WbNp&P-T
jT#;Ckl:^ujT+;T!!)-]!5IRpj1jXT!5J7.mf<C&jT#:qkl:^cjT+MHqlSr[!3P;^j/qAB!3Q5#kQ(Xb
jT#:_kl:^ajT+bMoW.'R!3>/\j/_>CrVur!jT,=]jT#:]kl:_GjT,#:mH3L1!9W>Bj6#b0pAb3UjT,>C
jT#;Ckl:^ujT,7ok.g!X!5IRpj1k6en,NI'jT,=qjT#:qkl:^ckQ(S^iiV;B!3P;^j/r4Zkl:^cjT,=_
jT#:_kl:^amf<(^iiD/@!3>/\jfAE^j8]1\jT,=]jT#:]o)SLb!9WACio]>&!9WAC!!)'Aj8]2BjT,>C
jT#;Cq>g!b!5IUqikORT!5Ik#q#KHij8]1pjT,=qjT#:qkl:^cjT+;BjT#:_o)S=]j/qAB!3P>_s/kSe
qZ$Vukl:^ajT+;@jT#:]q>fg]j/_5@!3>2]s/Y\joDellkl:_GjT+<&jT#;Cj8e6&j8]2BjT,>Cq#Kd^
!9WMG!5IUqikOdZqZ$W2j8e5Tj8]1pjT#@s^B!Br!5Iau!3P>_iiVbOoDelnj8e5Bj8]1^klCY^s/kA_
!3PJc!3>2]iiDkTm/R-ej8e5@j8]1\n,W.^s/Y5]!3>>a!9WACioU4@jo>DDj8e6&j8]2BpAjX^s5rDC
!9WMG!5IUqkeI#0jT#:qj8e5Tj8]1prW)-^s1dXq!5Iau!3P>_n#c5ajT#:_j8e5Bk5bJ]!3P>_s/kA_
!3PJc!3>2]p8dS]jT#:]j8e5@mJut]!3>2]s/Y5]!3>>a!9WACrT<8)jT#;Cj8e6&o`4I]!9WACs5rDC
!9WMG!5I^trW(rmjT#:qj8e5TquGs]!5IUqs1dXq!5Iau!3P\ipAj3TjT#:_j8e;Ds/k>^!3P>_s/kA_
!3PhmpAb2ojT+;@jT#:]jT#8\j/_5@!3>2]s/Y5]!3>qrn,NINjT+<&jT#;Cli?h]j6#D&!9WACs5rDC
!9WMG!5IUqikORT!5J+*nc7^bj8]1pjT,=qlN$e^!5Iau!3P>_iiV;B!3Q(tlN#tIj8]1^jT,=_nc8:^
!3PJc!3>2]iiD/@!3>/\j/_5@!3>2]s/Yqqm/R-ekl:_GjT+<&lN$e^!9W>Bj6#D&!9WAC!p8VFjo>DD
kl:^ujT+;Tnc8:^!5IRpj1jXT!5Iaur;cl4jT#:qkl:^cjT+;Bq#Kd^!3P;^j/qAB!3P_jp&P,pjT#:_
kl:^ajT+;@!!)-]!3>/\j/_5@!3>homf<BgjT#:]kl:_GjT+N,qrZu?!9W>Bj6#D&!9X7\kQ(YFjT#;C
kl:^ujT+baoY9Jf!5IRpj1jaWrVur5jT,=qjT#:qkl:^cjT,"VmB,IM!3P;^j/q_LpAb2qjT,=_jT#:_
kl:^ajT,7[k,[SD!3>/\j/_hQn,NHhjT,=]jT#:]kl:_GkQ(S^io]>&!9W>Bj6$7>kl:_GjT,>CjT#;C
kl:^umf<(^ikORT!5IRpjhLi1j8]1pjT,=qjT#:qo)SLb!3P>_iiV;B!3P>_!!)&]j8]1^jT,=_jT#:_
q>g!b!3>2]iiD/@!3>Gdq#KHUj8]1\jT,=]jT#:]kl:_GjT+<&jT#;Co)S=]j6#D&!9WACs5rVIqZ$WY
kl:^ujT+;TjT#:qq>fg]j1jXT!5IUqs1e+)oDem+kl:^cjT+;BjT#:_j8e5Bj8]1^jT,=_q#Kd^!3PJc
!3>2]iiDAFqZ$Vsj8e5@j8]1\jT#@_WrV8^!3>>a!9WACio]e3oDemRj8e6&j8]2BklCY^s5rDC!9WMG
!5IUqikP9hm/R.$j8e5Tj8]1pn,W.^s1dXq!5Iau!3P>_iiN1\jo>C`j8e5Bj8]1^pAjX^s/kA_!3PJc
!3>2]kc=T]jT#:]j8e5@j8]1\rW)-^s/Y5]!3>>a!9WACn)j9)jT#;Cj8e6&k5bJ]!9WACs5rDC!9WMG
!5IUqp:p"0jT#:qj8e5TmJut]!5IUqs1dXq!5Iau!3P>_rN54ajT#:_j8e5Bo`4I]!3P>_s/kA_!3PJc
!3>;`rW(rYjT#:]j8e5@quGs]!3>2]s/Y5]!3>>a!9W_MpAj48jT#;Cj8e<(s5rAB!9WACs5rDC!9WkQ
pAb3.jT+;TjT#:qjT#8\j1jXT!5IUqs1dXq!5J@1n,NHjjT+;BjT#:_li?h]j/qAB!3P>_s/kA_!3PJc
!3>2]iiD/@!3>\knc7^Nj8]1\jT,=]lN$e^!3>>a!9WACio]>&!9X+XlN#u-j8]2BjT,>Cnc8:^!9WMG
!5IUqikORT!5IRpj1jXT!5IUqs1e@0m/R.$kl:^cjT+;BlN$e^!3P;^j/qAB!3P>_!j/R)jo>C`kl:^a
jT+;@nc8:^!3>/\j/_5@!3>>ar;ckujT#:]kl:_GjT+<&q#Kd^!9W>Bj6#D&!9WbNp&P-TjT#;Ckl:^u
jT+;T!!)-]!5IRpj1jXT!5J7.mf<C&jT#:qkl:^cjT+MHqlSr[!3P;^j/qAB!3Q5#kQ(XbjT#:_kl:^a
jT+bMoW.'R!3>/\j/_>CrVur!jT,=]jT#:]kl:_GjT,#:mH3L1!9W>Bj6#b0pAb3UjT,>CjT#;Ckl:^u
jT,7ok.g!X!5IRpj1k6en,NI'jT,=qjT#:qkl:^ckQ(S^iiV;B!3P;^j/r4Zkl:^cjT,=_jT#:_kl:^a
mf<(^iiD/@!3>/\jfAE^j8]1\jT,=]jT#:]o)SLb!9WACio]>&!9WAC!!)'Aj8]2BjT,>CjT#;Cq>g!b
!5IUqikORT!5Ik#q#KHij8]1pjT,=qjT#:qkl:^cjT+;BjT#:_o)S=]j/qAB!3P>_s/kSeqZ$Vukl:^a
jT+;@jT#:]q>fg]j/_5@!3>2]s/Y\joDellkl:_GjT+<&jT#;Cj8e6&j8]2BjT,>Cq#Kd^!9WMG!5IUq
ikOdZqZ$W2j8e5Tj8]1pjT#@s^B!Br!5Iau!3P>_iiVbOoDelnj8e5Bj8]1^klCY^s/kA_!3PJc!3>2]
iiDkTm/R-ej8e5@j8]1\n,W.^s/Y5]!3>>a!9WACioU4@jo>DDj8e6&j8]2BpAjX^s5rDC!9WMG!5IUq
keI#0jT#:qj8e5Tj8]1prW)-^s1dXq!5Iau!3P>_n#c5ajT#:_j8e5Bk5bJ]!3P>_s/kA_!3PJc!3>2]
p8dS]jT#:]j8e5@mJut]!3>2]s/Y5]!3>>a!9WACrT<8)jT#;Cj8e6&o`4I]!9WACs5rDC!9WMG!5I^t
rW(rmjT#:qj8e5TquGs]!5IUqs1dXq!5Iau!3P\ipAj3TjT#:_j8e;Ds/k>^!3P>_s/kA_!3PhmpAb2o
jT+;@jT#:]jT#8\j/_5@!3>2]s/Y5]!3>qrn,NINjT+<&jT#;Cli?h]j6#D&!9WACs5rDC!9WMG!5IUq
ikORT!5J+*nc7^bj8]1pjT,=qlN$e^!5Iau!3P>_iiV;B!3Q(tlN#tIj8]1^jT,=_nc8:^!3PJc!3>2]
iiD/@!3>/\j/_5@!3>2]s/Yqqm/R-ekl:_GjT+<&lN$e^!9W>Bj6#D&!9WAC!p8VFjo>DDkl:^ujT+;T
nc8:^!5IRpj1jXT!5Iaur;cl4jT#:qkl:^cjT+;Bq#Kd^!3P;^j/qAB!3P_jp&P,pjT#:_kl:^ajT+;@
!!)-]!3>/\j/_5@!3>homf<BgjT#:]kl:_GjT+N,qrZu?!9W>Bj6#D&!9X7\kQ(YFjT#;Ckl:^ujT+ba
oY9Jf!5IRpj1jaWrVur5jT,=qjT#:qkl:^cjT,"VmB,IM!3P;^j/q_LpAb2qjT,=_jT#:_kl:^ajT,7[
k,[SD!3>/\j/_hQn,NHhjT,=]jT#:]kl:_GkQ(S^io]>&!9W>Bj6$7>kl:_GjT,>CjT#;Ckl:^umf<(^
ikORT!5IRpjhLi1j8]1pjT,=qjT#:qo)SLb!3P>_iiV;B!3P>_!!)&]j8]1^jT,=_jT#:_q>g!b!3>2]
iiD/@!3>Gdq#KHUj8]1\jT,=]jT#:]kl:_GjT+<&jT#;Co)S=]j6#D&!9WACs5rVIqZ$WYkl:^ujT+;T
jT#:qq>fg]j1jXT!5IUqs1e+)oDem+kl:^cjT+;BjT#:_j8e5Bj8]1^jT,=_q#Kd^!3PJc!3>2]iiDAF
qZ$Vsj8e5@j8]1\jT#@_WrV8^!3>>a!9WACio]e3oDemRj8e6&j8]2BklCY^s5rDC!9WMG`P;3Km/Y,?
j8]1pn,W.^s1dXq!5Iau`N9+?joEB&j8]1^pAjX^s/kA_!3PJcbH(N@jT*9#j8]1\rW)-^s/Y5]!3>>a
dcU2ajT*9^k5bJ]!9WACs5rDC!9V)tmJu:^j8dQA]>)Dek5aPEj8df6[&qXShuMf<j8e&;XfL"Qf`:'p
j8e<(VWRIMJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&QiM^<JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcM/<JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&])[?~>

%%EndBinary
grestore
np
180.316 17.6658 mo
184.521 22.1278 li
184.52 22.127 li
184.705 22.3223 li
184.125 22.8727 li
183.939 22.6769 li
179.734 18.2143 li
180.316 17.6658 li
186.356 24.0637 mo
187.941 25.7347 li
187.94 25.7336 li
190.772 28.6946 li
190.194 29.2474 li
187.362 26.286 li
185.776 24.6141 li
186.356 24.0637 li
192.436 30.4209 mo
194.574 32.6317 li
194.572 32.6295 li
196.902 35.0008 li
196.331 35.5614 li
194 33.1892 li
191.861 30.9772 li
192.436 30.4209 li
198.589 36.7014 mo
200.789 38.8954 li
200.785 38.8915 li
203.147 41.1862 li
202.59 41.7601 li
200.226 39.4636 li
198.024 37.2679 li
198.589 36.7014 li
204.874 42.8499 mo
205.048 43.0172 li
206.323 44.2492 li
207.523 45.4126 li
208.662 46.5148 li
208.66 46.5129 li
209.478 47.2935 li
208.926 47.8723 li
208.106 47.0907 li
206.966 45.987 li
205.766 44.8244 li
204.492 43.5927 li
204.493 43.5939 li
204.32 43.4271 li
204.874 42.8499 li
211.216 48.9369 mo
212.888 50.4701 li
212.879 50.4617 li
214.997 52.2857 li
214.985 52.2757 li
216.031 53.1076 li
215.533 53.7338 li
214.48 52.8971 li
212.352 51.0639 li
210.676 49.5266 li
211.216 48.9369 li
217.915 54.5732 mo
218.468 54.9856 li
218.461 54.9807 li
219.766 55.9133 li
219.759 55.909 li
221.157 56.8682 li
221.151 56.8642 li
222.656 57.858 li
222.652 57.8552 li
223.164 58.184 li
222.731 58.8569 li
222.218 58.5269 li
220.707 57.5299 li
219.304 56.5665 li
217.993 55.6292 li
217.437 55.2145 li
217.915 54.5732 li
225.185 59.4718 mo
225.951 59.9549 li
225.946 59.9522 li
229.551 62.1598 li
229.544 62.1557 li
230.638 62.797 li
230.233 63.487 li
229.136 62.844 li
225.526 60.6331 li
224.758 60.1484 li
225.185 59.4718 li
232.708 64.0109 mo
233.382 64.4064 li
233.375 64.4021 li
237.377 66.6322 li
237.368 66.6273 li
238.286 67.1086 li
237.915 67.8172 li
236.992 67.3336 li
232.982 65.0986 li
232.303 64.701 li
232.708 64.0109 li
240.412 68.2226 mo
241.464 68.774 li
241.453 68.7684 li
245.574 70.7683 li
245.56 70.7618 li
246.138 71.0159 li
245.817 71.7485 li
245.231 71.4913 li
241.098 69.4854 li
240.041 68.9312 li
240.412 68.2226 li
248.336 71.9811 mo
249.636 72.5516 li
249.618 72.5444 li
253.579 74.0608 li
253.557 74.0534 li
254.262 74.2782 li
254.018 75.0401 li
253.303 74.812 li
249.323 73.2882 li
248.014 72.7135 li
248.336 71.9811 li
256.548 75.0075 mo
257.438 75.2914 li
257.418 75.2855 li
261.301 76.3035 li
261.283 76.2992 li
262.702 76.602 li
262.536 77.3842 li
261.107 77.0796 li
257.205 76.0568 li
256.305 75.7696 li
256.548 75.0075 li
265.05 77.1029 mo
265.168 77.1281 li
265.152 77.1249 li
269.038 77.7964 li
269.026 77.7945 li
271.339 78.1192 li
271.228 78.9114 li
268.908 78.5859 li
265.008 77.912 li
264.883 77.8851 li
265.05 77.1029 li
273.709 78.4324 mo
276.79 78.79 li
276.782 78.789 li
280.065 79.1035 li
279.989 79.8998 li
276.702 79.5851 li
273.616 79.227 li
273.709 78.4324 li
282.454 79.3324 mo
284.558 79.5339 li
284.482 80.3302 li
282.378 80.1287 li
282.454 79.3324 li
178.827 20.1681 mo
177.282 15.029 li
182.321 16.8765 li
178.827 20.1681 li
0 .993347 1 0 cmyk
f
284.155 76.7854 mo
284.155 75.1949 285.444 73.9054 287.035 73.9054 cv
288.625 73.9054 289.915 75.1949 289.915 76.7854 cv
289.915 78.376 288.625 79.6654 287.035 79.6654 cv
285.444 79.6654 284.155 78.376 284.155 76.7854 cv
cp
ef
51.4859 164.769 mo
53.2964 162.131 li
53.956 162.583 li
52.1455 165.222 li
51.4859 164.769 li
54.6544 160.152 mo
56.2798 157.783 li
56.4671 157.513 li
57.1249 157.968 li
56.9379 158.238 li
56.939 158.237 li
55.314 160.604 li
54.6544 160.152 li
57.8335 155.54 mo
59.6552 152.909 li
60.313 153.364 li
58.4912 155.995 li
57.8335 155.54 li
61.0216 150.936 mo
61.0845 150.845 li
62.8669 148.317 li
63.5206 148.778 li
61.7392 151.304 li
61.7412 151.302 li
61.6793 151.391 li
61.0216 150.936 li
64.2499 146.356 mo
65.9095 144.002 li
66.1007 143.739 li
66.7484 144.208 li
66.5587 144.47 li
66.5617 144.466 li
64.9037 146.817 li
64.2499 146.356 li
67.5093 141.795 mo
69.3873 139.205 li
70.0351 139.674 li
68.157 142.265 li
67.5093 141.795 li
70.8011 137.257 mo
72.7254 134.7 li
73.3647 135.181 li
71.4402 137.738 li
70.8011 137.257 li
74.1686 132.782 mo
75.6602 130.801 li
76.1119 130.228 li
76.7399 130.724 li
76.2907 131.293 li
76.2966 131.285 li
74.8079 133.263 li
74.1686 132.782 li
77.5994 128.345 mo
79.5827 125.834 li
80.2105 126.329 li
78.2272 128.841 li
77.5994 128.345 li
81.0945 123.955 mo
83.1502 121.502 li
83.7633 122.016 li
81.7076 124.469 li
81.0945 123.955 li
84.692 119.663 mo
85.6096 118.568 li
86.7894 117.233 li
87.389 117.763 li
86.2125 119.094 li
86.2194 119.086 li
85.305 120.177 li
84.692 119.663 li
88.3892 115.434 mo
90.555 113.078 li
91.144 113.619 li
88.9781 115.975 li
88.3892 115.434 li
92.2203 111.337 mo
93.2534 110.262 li
94.4722 109.051 li
95.036 109.619 li
93.8205 110.826 li
93.8271 110.819 li
92.7973 111.892 li
92.2203 111.337 li
96.1914 107.362 mo
98.4533 105.23 li
98.5304 105.161 li
99.0623 105.759 li
98.9895 105.824 li
98.9979 105.816 li
96.7403 107.944 li
96.1914 107.362 li
100.323 103.566 mo
101.088 102.884 li
102.767 101.481 li
103.28 102.095 li
101.606 103.494 li
101.616 103.486 li
100.855 104.163 li
100.323 103.566 li
104.642 99.9625 mo
106.436 98.5629 li
107.197 98.0124 li
107.666 98.6607 li
106.911 99.2068 li
106.923 99.1981 li
105.134 100.593 li
104.642 99.9625 li
109.142 96.6061 mo
109.151 96.5999 li
111.821 94.8265 li
112.263 95.4927 li
109.6 97.2618 li
109.613 97.2528 li
109.611 97.2544 li
109.142 96.6061 li
113.887 93.5729 mo
114.67 93.0999 li
116.695 92.0002 li
117.076 92.7034 li
115.06 93.7984 li
115.076 93.7892 li
114.301 94.2577 li
113.887 93.5729 li
118.855 90.9124 mo
120.317 90.2096 li
121.792 89.593 li
122.101 90.3311 li
120.635 90.9436 li
120.654 90.935 li
119.202 91.6333 li
118.855 90.9124 li
124.045 88.7063 mo
126.1 87.9793 li
127.103 87.6893 li
127.325 88.4577 li
126.334 88.7446 li
126.356 88.7373 li
124.312 89.4604 li
124.045 88.7063 li
129.438 87.0397 mo
132.03 86.4596 li
132.593 86.3707 li
132.717 87.161 li
132.167 87.2479 li
132.192 87.2432 li
129.613 87.8204 li
129.438 87.0397 li
134.963 85.9962 mo
135.057 85.9814 li
138.155 85.767 li
138.231 85.7693 li
138.204 86.5689 li
138.149 86.5672 li
138.19 86.5664 li
135.13 86.7782 li
135.164 86.7743 li
135.088 86.7864 li
134.963 85.9962 li
140.629 85.8499 mo
141.338 85.8738 li
143.846 86.1878 li
143.746 86.9815 li
141.256 86.6697 li
141.292 86.6726 li
140.603 86.6496 li
140.629 85.8499 li
146.237 86.6218 mo
147.915 86.9694 li
149.373 87.3777 li
149.157 88.1482 li
147.713 87.7434 li
147.74 87.7499 li
146.075 87.4052 li
146.237 86.6218 li
151.699 88.0559 mo
154.724 89.1007 li
154.463 89.8568 li
151.438 88.8119 li
151.699 88.0559 li
156.969 90.006 mo
158.229 90.5144 li
159.92 91.2846 li
159.589 92.0125 li
157.905 91.2461 li
157.921 91.2529 li
156.669 90.7478 li
156.969 90.006 li
162.112 92.298 mo
164.973 93.731 li
164.615 94.4463 li
161.754 93.0132 li
162.112 92.298 li
167.101 94.8677 mo
168.946 95.8661 li
169.91 96.4212 li
169.511 97.1146 li
168.552 96.562 li
168.561 96.5673 li
166.72 95.5714 li
167.101 94.8677 li
171.99 97.6192 mo
172.583 97.9605 li
174.742 99.2691 li
174.328 99.9533 li
172.172 98.6468 li
172.179 98.6515 li
171.591 98.3123 li
171.99 97.6192 li
176.795 100.527 mo
179.5 102.235 li
179.073 102.912 li
176.368 101.203 li
176.795 100.527 li
181.519 103.544 mo
183.603 104.903 li
184.198 105.306 li
183.751 105.968 li
183.158 105.568 li
183.163 105.572 li
181.082 104.214 li
181.519 103.544 li
186.187 106.649 mo
188.839 108.44 li
188.392 109.103 li
185.74 107.312 li
186.187 106.649 li
190.828 109.783 mo
190.982 109.887 li
193.464 111.605 li
193.009 112.263 li
190.528 110.546 li
190.532 110.549 li
190.38 110.446 li
190.828 109.783 li
195.438 112.971 mo
198.069 114.792 li
197.614 115.45 li
194.982 113.629 li
195.438 112.971 li
200.042 116.158 mo
202.674 117.979 li
202.218 118.637 li
199.587 116.815 li
200.042 116.158 li
204.647 119.345 mo
205.612 120.013 li
205.608 120.011 li
207.287 121.145 li
206.84 121.808 li
205.159 120.672 li
204.192 120.003 li
204.647 119.345 li
209.276 122.488 mo
211.928 124.279 li
211.48 124.942 li
208.828 123.151 li
209.276 122.488 li
213.924 125.599 mo
216.279 127.134 li
216.274 127.13 li
216.603 127.337 li
216.177 128.015 li
215.845 127.806 li
213.487 126.27 li
213.924 125.599 li
218.635 128.615 mo
219.745 129.314 li
219.738 129.309 li
221.357 130.283 li
220.944 130.968 li
219.322 129.993 li
218.209 129.293 li
218.635 128.615 li
223.408 131.508 mo
226.191 133.089 li
225.796 133.784 li
223.013 132.204 li
223.408 131.508 li
228.297 134.214 mo
229.784 135 li
229.771 134.994 li
231.138 135.653 li
230.79 136.374 li
229.416 135.711 li
227.923 134.921 li
228.297 134.214 li
233.29 136.675 mo
236.115 137.886 li
236.095 137.879 li
236.213 137.922 li
235.938 138.673 li
235.809 138.626 li
232.974 137.41 li
233.29 136.675 li
238.466 138.749 mo
239.152 139 li
239.128 138.992 li
241.496 139.692 li
241.269 140.459 li
238.889 139.756 li
238.191 139.5 li
238.466 138.749 li
243.801 140.232 mo
244.937 140.475 li
244.912 140.47 li
246.929 140.766 li
246.812 141.557 li
244.783 141.26 li
243.634 141.014 li
243.801 140.232 li
249.295 141.052 mo
250.667 141.198 li
250.652 141.196 li
252.468 141.322 li
252.413 142.12 li
250.589 141.994 li
249.21 141.847 li
249.295 141.052 li
254.851 141.444 mo
256.611 141.504 li
256.598 141.504 li
258.037 141.506 li
258.035 142.306 li
256.59 142.304 li
254.823 142.243 li
254.851 141.444 li
260.424 141.485 mo
262.677 141.419 li
262.665 141.419 li
263.61 141.363 li
263.657 142.161 li
262.707 142.218 li
260.448 142.285 li
260.424 141.485 li
265.993 141.213 mo
268.784 140.966 li
268.767 140.968 li
269.162 140.916 li
269.266 141.709 li
268.863 141.762 li
266.064 142.01 li
265.993 141.213 li
271.542 140.605 mo
274.715 140.19 li
274.819 140.983 li
271.646 141.398 li
271.542 140.605 li
277.054 139.761 mo
280.2 139.174 li
280.346 139.961 li
277.201 140.547 li
277.054 139.761 li
282.517 138.643 mo
285.626 137.886 li
285.816 138.663 li
282.706 139.42 li
282.517 138.643 li
287.926 137.263 mo
289.288 136.87 li
289.276 136.873 li
290.974 136.328 li
291.218 137.09 li
289.515 137.637 li
288.148 138.031 li
287.926 137.263 li
293.234 135.56 mo
294.558 135.09 li
294.546 135.095 li
296.217 134.439 li
296.509 135.184 li
294.832 135.842 li
293.502 136.314 li
293.234 135.56 li
298.419 133.52 mo
299.416 133.089 li
299.402 133.095 li
301.309 132.184 li
301.654 132.906 li
299.741 133.82 li
298.737 134.255 li
298.419 133.52 li
303.423 131.082 mo
303.779 130.894 li
303.763 130.903 li
305.749 129.733 li
305.731 129.744 li
306.142 129.472 li
306.583 130.14 li
306.164 130.417 li
304.161 131.597 li
303.798 131.79 li
303.423 131.082 li
308.103 128.13 mo
309.213 127.301 li
309.193 127.317 li
310.571 126.138 li
311.091 126.745 li
309.703 127.934 li
308.582 128.771 li
308.103 128.13 li
312.204 124.474 mo
313.068 123.441 li
313.042 123.474 li
313.954 122.115 li
313.929 122.158 li
314.027 121.964 li
314.741 122.325 li
314.632 122.541 li
313.695 123.937 li
312.818 124.987 li
312.204 124.474 li
314.949 119.816 mo
315.077 119.436 li
315.062 119.497 li
315.299 118.089 li
315.294 118.157 li
315.286 116.788 li
316.086 116.783 li
316.094 118.187 li
315.845 119.662 li
315.706 120.072 li
314.949 119.816 li
314.768 114.581 mo
314.485 113.737 li
314.501 113.777 li
313.693 112.018 li
313.708 112.047 li
313.525 111.72 li
314.222 111.328 li
314.414 111.669 li
315.236 113.462 li
315.526 114.326 li
314.768 114.581 li
312.328 109.67 mo
311.38 108.21 li
311.392 108.227 li
310.536 107.045 li
311.184 106.576 li
312.046 107.766 li
312.999 109.234 li
312.328 109.67 li
309.094 105.148 mo
308.179 103.991 li
308.188 104.002 li
307.071 102.688 li
307.68 102.17 li
308.802 103.489 li
309.722 104.652 li
309.094 105.148 li
305.497 100.892 mo
304.194 99.4507 li
304.201 99.4583 li
303.335 98.5484 li
303.914 97.9966 li
304.784 98.9104 li
306.091 100.356 li
305.497 100.892 li
301.679 96.8234 mo
299.532 94.6716 li
299.538 94.6775 li
299.423 94.5664 li
299.977 93.9896 li
300.096 94.1036 li
302.246 96.2583 li
301.679 96.8234 li
297.693 92.9027 mo
296.981 92.2181 li
296.986 92.2232 li
295.363 90.7202 li
295.907 90.1333 li
297.532 91.6388 li
298.247 92.3261 li
297.693 92.9027 li
293.596 89.1064 mo
291.501 87.2328 li
291.506 87.2371 li
291.212 86.9823 li
291.735 86.3776 li
292.032 86.6343 li
294.129 88.5102 li
293.596 89.1064 li
289.397 85.4116 mo
288.599 84.7211 li
288.604 84.725 li
286.961 83.3461 li
287.475 82.7333 li
289.12 84.1142 li
289.92 84.8068 li
289.397 85.4116 li
285.12 81.8193 mo
282.625 79.8157 li
283.126 79.1918 li
285.622 81.1956 li
285.12 81.8193 li
280.754 78.3129 mo
279.402 77.2269 li
279.411 77.2337 li
278.243 76.3478 li
278.727 75.7104 li
279.899 76.5997 li
281.255 77.6891 li
280.754 78.3129 li
276.331 74.8973 mo
273.781 72.9634 li
274.265 72.3259 li
276.814 74.26 li
276.331 74.8973 li
271.855 71.5505 mo
269.254 69.6871 li
269.72 69.0369 li
272.321 70.9001 li
271.855 71.5505 li
267.303 68.2896 mo
266.487 67.7054 li
266.496 67.7118 li
264.675 66.4842 li
265.122 65.8209 li
266.948 67.0516 li
267.768 67.6392 li
267.303 68.2896 li
262.685 65.1427 mo
260.031 63.3545 li
260.478 62.691 li
263.132 64.4794 li
262.685 65.1427 li
258.019 62.063 mo
256.771 61.2628 li
256.776 61.2663 li
255.315 60.3634 li
255.736 59.6829 li
257.2 60.5876 li
258.451 61.3895 li
258.019 62.063 li
253.276 59.1112 mo
250.525 57.4776 li
250.933 56.7897 li
253.685 58.4232 li
253.276 59.1112 li
248.445 56.2954 mo
247.417 55.712 li
247.425 55.7161 li
245.649 54.7575 li
246.029 54.0536 li
247.809 55.0141 li
248.84 55.5997 li
248.445 56.2954 li
243.534 53.6441 mo
241.561 52.6395 li
241.571 52.6444 li
240.68 52.2214 li
241.023 51.4988 li
241.919 51.9242 li
243.897 52.931 li
243.534 53.6441 li
238.52 51.2055 mo
236.131 50.162 li
236.141 50.1661 li
235.591 49.9433 li
235.891 49.2019 li
236.446 49.4266 li
238.84 50.4724 li
238.52 51.2055 li
233.367 49.0419 mo
230.92 48.0504 li
230.928 48.0537 li
230.405 47.8545 li
230.689 47.1069 li
231.217 47.3074 li
233.667 48.3005 li
233.367 49.0419 li
228.161 47.0014 mo
225.678 46.0569 li
225.687 46.0606 li
225.175 45.8816 li
225.44 45.1263 li
225.957 45.3073 li
228.446 46.2538 li
228.161 47.0014 li
222.91 45.0894 mo
220.406 44.2138 li
220.418 44.2177 li
219.896 44.0539 li
220.136 43.2906 li
220.664 43.4564 li
223.174 44.3341 li
222.91 45.0894 li
217.606 43.3355 mo
215.107 42.5513 li
215.121 42.5556 li
214.561 42.4031 li
214.772 41.6312 li
215.339 41.7857 li
217.846 42.5722 li
217.606 43.3355 li
212.246 41.7724 mo
209.779 41.1005 li
209.796 41.1048 li
209.168 40.9631 li
209.345 40.1828 li
209.981 40.3263 li
212.456 41.0005 li
212.246 41.7724 li
206.827 40.4347 mo
204.424 39.8918 li
204.443 39.8957 li
203.718 39.7696 li
203.855 38.9815 li
204.59 39.1092 li
207.003 39.6542 li
206.827 40.4347 li
201.354 39.3584 mo
199.04 38.9557 li
199.062 38.9589 li
198.216 38.8599 li
198.309 38.0653 li
199.166 38.1657 li
201.491 38.5701 li
201.354 39.3584 li
195.832 38.5806 mo
193.629 38.3225 li
193.647 38.3242 li
192.668 38.2543 li
192.725 37.4565 li
193.713 37.5268 li
195.926 37.7861 li
195.832 38.5806 li
190.286 38.105 mo
188.195 38.0229 li
188.209 38.0231 li
187.101 38.0167 li
187.105 37.2167 li
188.22 37.2233 li
190.317 37.3055 li
190.286 38.105 li
184.715 38.029 mo
182.728 38.0862 li
182.743 38.0856 li
181.533 38.1639 li
181.481 37.3655 li
182.698 37.2868 li
184.692 37.2294 li
184.715 38.029 li
179.155 38.3485 mo
177.233 38.5437 li
177.248 38.542 li
175.992 38.7175 li
175.881 37.9251 li
177.144 37.7486 li
179.074 37.5526 li
179.155 38.3485 li
173.636 39.0803 mo
171.708 39.4257 li
171.723 39.4226 li
170.511 39.6891 li
170.339 38.9077 li
171.559 38.6396 li
173.494 38.2928 li
173.636 39.0803 li
168.189 40.2304 mo
166.153 40.7627 li
166.168 40.7584 li
165.12 41.0773 li
164.887 40.3118 li
165.943 39.9906 li
167.987 39.4564 li
168.189 40.2304 li
162.846 41.7921 mo
160.567 42.5855 li
160.582 42.58 li
159.85 42.8682 li
159.557 42.1237 li
160.297 41.8326 li
162.583 41.0367 li
162.846 41.7921 li
157.633 43.7464 mo
154.95 44.9252 li
154.965 44.9187 li
154.722 45.0369 li
154.372 44.3175 li
154.622 44.1961 li
157.311 43.0139 li
157.633 43.7464 li
152.564 46.0874 mo
152.13 46.2987 li
152.144 46.2916 li
149.748 47.5739 li
149.371 46.8686 li
151.773 45.5828 li
152.214 45.368 li
152.564 46.0874 li
147.681 48.7625 mo
146.463 49.476 li
146.476 49.4682 li
144.967 50.4287 li
144.538 49.7539 li
146.053 48.7895 li
147.277 48.0723 li
147.681 48.7625 li
142.969 51.7323 mo
140.751 53.2511 li
140.762 53.2438 li
140.348 53.5465 li
139.876 52.901 li
140.294 52.5944 li
142.516 51.0723 li
142.969 51.7323 li
138.411 54.9637 mo
137.878 55.3537 li
137.887 55.3468 li
135.881 56.9041 li
135.391 56.2722 li
137.401 54.7115 li
137.939 54.318 li
138.411 54.9637 li
134.014 58.3955 mo
132.098 59.9653 li
132.106 59.959 li
131.558 60.4306 li
131.036 59.8241 li
131.588 59.3494 li
133.507 57.7767 li
134.014 58.3955 li
129.738 61.9956 mo
129.193 62.4643 li
129.2 62.4584 li
127.355 64.1178 li
126.82 63.523 li
128.668 61.8607 li
129.216 61.3891 li
129.738 61.9956 li
125.589 65.7312 mo
123.354 67.8249 li
123.36 67.8196 li
123.261 67.9157 li
122.703 67.342 li
122.805 67.2434 li
125.043 65.1474 li
125.589 65.7312 li
121.54 69.5887 mo
120.422 70.6763 li
120.426 70.6714 li
119.27 71.8344 li
118.703 71.2705 li
119.861 70.1052 li
120.983 69.015 li
121.54 69.5887 li
117.579 73.5367 mo
117.48 73.6357 li
117.485 73.6313 li
115.362 75.8356 li
114.785 75.2807 li
116.911 73.074 li
117.011 72.9728 li
117.579 73.5367 li
113.713 77.5721 mo
111.575 79.8579 li
111.578 79.854 li
111.531 79.9053 li
110.94 79.3668 li
110.989 79.3133 li
113.129 77.0255 li
113.713 77.5721 li
109.915 81.6795 mo
108.611 83.111 li
108.616 83.1057 li
107.782 84.0547 li
107.181 83.5265 li
108.017 82.5748 li
109.324 81.1408 li
109.915 81.6795 li
106.197 85.8572 mo
104.084 88.2607 li
103.483 87.7325 li
105.596 85.329 li
106.197 85.8572 li
102.509 90.0603 mo
100.445 92.5063 li
99.834 91.9904 li
101.897 89.5446 li
102.509 90.0603 li
98.8981 94.3408 mo
96.8348 96.7867 li
96.2232 96.271 li
98.2865 93.825 li
98.8981 94.3408 li
95.3201 98.6396 mo
93.2987 101.12 li
92.6783 100.615 li
94.6999 98.1343 li
95.3201 98.6396 li
91.7825 102.981 mo
90.6987 104.311 li
90.7023 104.306 li
89.7806 105.47 li
89.1536 104.973 li
90.0768 103.807 li
91.1623 102.475 li
91.7825 102.981 li
88.2906 107.352 mo
86.3039 109.86 li
85.6765 109.363 li
87.6634 106.855 li
88.2906 107.352 li
84.8137 111.741 mo
84.6887 111.899 li
84.6914 111.896 li
82.8561 114.267 li
82.2235 113.778 li
84.0603 111.404 li
84.1867 111.245 li
84.8137 111.741 li
81.3872 116.165 mo
79.4285 118.696 li
78.796 118.206 li
80.7545 115.675 li
81.3872 116.165 li
77.9696 120.597 mo
76.033 123.144 li
75.396 122.66 li
77.3327 120.113 li
77.9696 120.597 li
74.5806 125.055 mo
72.644 127.602 li
72.0072 127.118 li
73.9437 124.571 li
74.5806 125.055 li
71.2051 129.52 mo
69.2848 132.08 li
68.645 131.6 li
70.5652 129.04 li
71.2051 129.52 li
67.8446 134 mo
66.5804 135.685 li
66.5816 135.683 li
65.93 136.561 li
65.2876 136.085 li
65.9398 135.205 li
67.2047 133.52 li
67.8446 134 li
64.4999 138.488 mo
62.5929 141.058 li
61.9505 140.582 li
63.8575 138.012 li
64.4999 138.488 li
61.1626 142.985 mo
59.2556 145.555 li
58.6132 145.078 li
60.5202 142.509 li
61.1626 142.985 li
57.8255 147.483 mo
56.8557 148.789 li
56.2132 148.312 li
57.1829 147.006 li
57.8255 147.483 li
58.9383 149.339 mo
54.1508 151.763 li
55.084 146.478 li
58.9383 149.339 li
.749722 .679194 .670497 .901457 cmyk
f
0 .993347 1 0 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSX+Calibri gcheck setglobal} if
1 382 2 <000100ac0000037c050e002c00aeb0852b58b11a27b8ffe8b310014d27b8
fff0b30f014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d
27b80211400909132013200009001ab80108400d802601c02601d0260126
260619b8010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f
2f1239392f2f10e12b2b2b2b2b3231301bb1261ab80108400b6c00260116
032626060d19b8010cb46c0d510627b8010cb26c065400183f2b3f2b1239
2f5f5e5d2b30315925140e0223212226351134363321321e0215140e0223
211121321e0215140e0223211121321e02037c040a0d08fd931729291702
66080d080505080d08fe0601b2080d090404090d08fe4e0201080d0a0447
121b12081f270482271f08121b14121b1108fe6a09101c13121a1007fe31
08111b00>HSXFSX+Calibri AddT42Char 
1 5434 17 <00010022fffa037b03bc002c010db0852b58b90023fff840170b0c014c1f
080b0c014c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b3
0b014d14b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8ff
f040370b014d37110126110127100128050122280b014d3d220124220121
280b014d3f210124210120280b014d3d2001242001270f0176210121b8ff
d04009111548212013014d21b8ffe8400910014d21200f014d21b8ffe8b3
0c014d21b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b
2b2b2b2b002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b
5d2b5d2b2b1bb5002101100521b8ffd0400b1115482849210b1a490b4c00
183f3f12393f2b5f5e5d30315901140e0207010e0323222e0227012e0235
343e0233321e0217131737133e0333321e02037b01020302fecd040d1a28
1e1e28190e04fece04050108131f171d23130904fe0403fb020a13211b17
1e1107039f04090a0c07fca90b0e080304080e0a03570c120903080c0702
03080c09fd1a0c0c02e6090c080302080b00>HSXFSX+Calibri AddT42Char 
1 5842 18 <0001002a037501730578001b001bb0852b58b20b1747003fcd31301bb30b
40174700183f1acd30315901140e0207070e0323222e02371335343e0233
321e020173060e171189050d13191311170a0104850b18241a1924170b05
261f332f2d18ce070c070303070c0901137f1a20120606122000>HSXFSX+Calibri AddT42Char 
1 3110 10 <00010099fffa03a005710032009db0852b58b43f34012a13b8ffe8b30b01
4d13b8fff0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f8
40171e0b0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a
00400c014d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239
012f2f2be12b2b2b2b10e12b2b2b2b3931305d1bb32a192d10b801064009
6c2d4a2446194c054c00183f3f3f3f2b123930315925140e0223222e0235
11342e022322060711140e0223222e023511343e0233321e021511363633
321e021503a00812201819201208182e49303e7c44081220191820130707
132018192012084790495a7b4c2119080b080404080b08020f4d5e442458
55fd8b080b080404080b080538080c080404080c08fde54b493d66896100
>HSXFSX+Calibri AddT42Char 
HSXFSX+Calibri /CharStrings get begin
/g2 2 def
/g17 17 def
/g18 18 def
/g10 10 def
end
HSXFSX+Calibri /Encoding get
dup 48 /g2 put
dup 49 /g17 put
dup 50 /g18 put
dup 51 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 /g5 /g9 /g11 /g15 /g14 /g1 /g8 /g7 /g13 /g2 /g17 /g18 /g10 204{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf209.8 82.9414 mo(01\(2*,/.%3)[4.47606 4.20596 4.79602 1.81599 3.79607 2.19598 4.99594 4.51604 3.19606 0 ]xsh164.254 48.9234 mo
159.888 48.9234 155.806 47.7092 152.327 45.6001 cv
152.214 45.368 li
152.067 45.4399 li
149.647 43.9287 147.528 41.9816 145.82 39.7075 cv
146.39 39.0633 li
145.791 38.5332 li
145.34 39.0433 li
142.739 35.3124 141.214 30.7762 141.214 25.8833 cv
141.214 13.1587 151.529 2.84345 164.254 2.84345 cv
176.695 2.84345 186.833 12.7036 187.279 25.0359 cv
186.356 24.0637 li
185.776 24.6141 li
187.292 26.2123 li
187.236 30.2189 186.157 33.9776 184.305 37.2405 cv
182.698 37.2868 li
181.481 37.3655 li
181.533 38.1639 li
182.738 38.0859 li
183.82 38.0548 li
179.752 44.581 172.51 48.9234 164.254 48.9234 cv
157.311 43.0139 mo
154.622 44.1961 li
154.372 44.3175 li
154.722 45.0369 li
154.961 44.9206 li
157.633 43.7464 li
157.311 43.0139 li
162.583 41.0367 mo
160.297 41.8326 li
159.557 42.1237 li
159.85 42.8682 li
160.576 42.5827 li
162.846 41.7921 li
162.583 41.0367 li
167.987 39.4564 mo
165.943 39.9906 li
164.887 40.3118 li
165.12 41.0773 li
166.161 40.7606 li
168.189 40.2304 li
167.987 39.4564 li
173.494 38.2928 mo
171.559 38.6396 li
170.339 38.9077 li
170.511 39.6891 li
171.714 39.4246 li
173.636 39.0803 li
173.494 38.2928 li
179.074 37.5526 mo
177.144 37.7486 li
175.881 37.9251 li
175.992 38.7175 li
177.241 38.5429 li
179.155 38.3485 li
179.074 37.5526 li
148.209 35.661 mo
147.339 36.7184 li
147.956 37.2269 li
148.839 36.155 li
149.931 34.6847 li
149.289 34.2077 li
148.209 35.661 li
150.75 32.0118 mo
150.606 32.2337 li
151.278 32.668 li
151.436 32.4233 li
152.407 30.6759 li
152.818 29.8048 li
152.094 29.4637 li
151.695 30.3108 li
150.75 32.0118 li
153.098 27.0803 mo
153.02 27.2781 li
153.764 27.573 li
153.854 27.3459 li
154.333 25.7878 li
156.306 26.294 li
155.174 21.0482 li
151.657 25.1015 li
153.557 25.5889 li
153.098 27.0803 li
180.283 18.7966 mo
183.939 22.6769 li
184.125 22.8727 li
184.705 22.3223 li
184.52 22.127 li
184.521 22.1278 li
180.865 18.248 li
182.321 16.8765 li
177.282 15.029 li
178.827 20.1681 li
180.283 18.7966 li
.0666667 .0470588 0 0 cmyk
f
145.82 39.7075 mo
145.656 39.4895 145.496 39.2672 145.34 39.0433 cv
145.791 38.5332 li
146.39 39.0633 li
145.82 39.7075 li
147.956 37.2269 mo
147.339 36.7184 li
148.209 35.661 li
149.289 34.2077 li
149.931 34.6847 li
148.839 36.155 li
147.956 37.2269 li
151.278 32.668 mo
150.606 32.2337 li
150.75 32.0118 li
151.695 30.3108 li
152.094 29.4637 li
152.818 29.8048 li
152.407 30.6759 li
151.436 32.4233 li
151.278 32.668 li
153.764 27.573 mo
153.02 27.2781 li
153.098 27.0803 li
153.557 25.5889 li
151.657 25.1015 li
155.174 21.0482 li
156.306 26.294 li
154.333 25.7878 li
153.854 27.3459 li
153.764 27.573 li
.403922 .32549 .278431 0 cmyk
f
187.292 26.2123 mo
185.776 24.6141 li
186.356 24.0637 li
187.279 25.0359 li
187.289 25.3169 187.294 25.5999 187.294 25.8833 cv
187.294 25.9928 187.293 26.1031 187.292 26.2123 cv
184.125 22.8727 mo
183.939 22.6769 li
180.283 18.7966 li
178.827 20.1681 li
177.282 15.029 li
182.321 16.8765 li
180.865 18.248 li
184.521 22.1278 li
184.52 22.127 li
184.705 22.3223 li
184.125 22.8727 li
.0666667 .952941 .913726 0 cmyk
f
152.327 45.6001 mo
152.24 45.5472 152.153 45.4939 152.067 45.4399 cv
152.214 45.368 li
152.327 45.6001 li
154.722 45.0369 mo
154.372 44.3175 li
154.622 44.1961 li
157.311 43.0139 li
157.633 43.7464 li
154.961 44.9206 li
154.722 45.0369 li
159.85 42.8682 mo
159.557 42.1237 li
160.297 41.8326 li
162.583 41.0367 li
162.846 41.7921 li
160.576 42.5827 li
159.85 42.8682 li
165.12 41.0773 mo
164.887 40.3118 li
165.943 39.9906 li
167.987 39.4564 li
168.189 40.2304 li
166.161 40.7606 li
165.12 41.0773 li
170.511 39.6891 mo
170.339 38.9077 li
171.559 38.6396 li
173.494 38.2928 li
173.636 39.0803 li
171.714 39.4246 li
170.511 39.6891 li
175.992 38.7175 mo
175.881 37.9251 li
177.144 37.7486 li
179.074 37.5526 li
179.155 38.3485 li
177.241 38.5429 li
175.992 38.7175 li
181.533 38.1639 mo
181.481 37.3655 li
182.698 37.2868 li
184.305 37.2405 li
184.149 37.5154 183.987 37.7871 183.82 38.0548 cv
182.738 38.0859 li
181.533 38.1639 li
.74902 .666667 .611765 .823529 cmyk
f
.749722 .679194 .670497 .901457 cmyk
HSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf185.465 188.301 mo(!"#$)[8.19995 2.39999 5.09993 0 ]xsh%ADOBeginSubsetFont: LAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSY+Calibri gcheck setglobal} if
1 1160 3 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>HSXFSY+Calibri AddT42Char 
HSXFSY+Calibri /CharStrings get begin
/g3 3 def
end
HSXFSY+Calibri /Encoding get
dup 35 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSY+Calibri*1 [33{/.notdef}rp /g1 /g2 /g3 220{/.notdef}rp]HSXFSY+Calibri nfHSXFSY+Calibri*1 [6 0 0 -6 0 0 ]msf205.865 189.261 mo(#)sh306.201 105.081 mo
310.961 101.046 li
315.721 105.081 li
310.961 109.117 li
cp
0 0 0 0 cmyk
ef
.8 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
306.201 105.081 mo
310.961 101.046 li
315.721 105.081 li
310.961 109.117 li
cp
.749722 .679194 .670497 .901457 cmyk
@
.749722 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSX+Calibri gcheck setglobal} if
1 6362 20 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>HSXFSX+Calibri AddT42Char 
HSXFSX+Calibri /CharStrings get begin
/g20 20 def
end
HSXFSX+Calibri /Encoding get
dup 52 /g20 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 /g5 /g9 /g11 /g15 /g14 /g1 /g8 /g7 /g13 /g2 /g17 /g18 /g10 /g20 203{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf221.467 124.461 mo(%4)[3.20007 0 ]xsh219.789 132.056 mo
224.549 128.02 li
229.309 132.056 li
224.549 136.091 li
cp
0 0 0 0 cmyk
ef
219.789 132.056 mo
224.549 128.02 li
229.309 132.056 li
224.549 136.091 li
cp
.749722 .679194 .670497 .901457 cmyk
@
.749722 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSX+Calibri gcheck setglobal} if
1 5958 19 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>HSXFSX+Calibri AddT42Char 
HSXFSX+Calibri /CharStrings get begin
/g19 19 def
end
HSXFSX+Calibri /Encoding get
dup 53 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 /g5 /g9 /g11 /g15 /g14 /g1 /g8 /g7 /g13 /g2 /g17 /g18 /g10 /g20 /g19 202{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf118.157 108.381 mo(%5)[3.20007 0 ]xsh115.782 92.9402 mo
120.542 88.9048 li
125.302 92.9402 li
120.542 96.9757 li
cp
0 0 0 0 cmyk
ef
115.782 92.9402 mo
120.542 88.9048 li
125.302 92.9402 li
120.542 96.9757 li
cp
.749722 .679194 .670497 .901457 cmyk
@
.749722 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: JAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HSXFSX+Calibri gcheck setglobal} if
1 7290 22 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00>HSXFSX+Calibri AddT42Char 
HSXFSX+Calibri /CharStrings get begin
/g22 22 def
end
HSXFSX+Calibri /Encoding get
dup 54 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HSXFSX+Calibri*1 [33{/.notdef}rp /g4 /g3 /g12 /g6 /g16 /g21 /g5 /g9 /g11 /g15 /g14 /g1 /g8 /g7 /g13 /g2 /g17 /g18 /g10 /g20 /g19 /g22 201{/.notdef}rp]HSXFSX+Calibri nfHSXFSX+Calibri*1 [10 0 0 -10 0 0 ]msf169.191 53.4214 mo(%6)[3.20007 0 ]xsh165.981 38.142 mo
170.741 34.1066 li
175.501 38.142 li
170.741 42.1774 li
cp
0 0 0 0 cmyk
ef
165.981 38.142 mo
170.741 34.1066 li
175.501 38.142 li
170.741 42.1774 li
cp
.749722 .679194 .670497 .901457 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/HSXFSX+Calibri*1 uf/HSXFSX+Calibri uf/JAAAAA+Calibri uf/HSXFSY+Calibri*1 uf/HSXFSY+Calibri uf/LAAAAA+Calibri ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
